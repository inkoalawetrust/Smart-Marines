//The code that handles the machine gun turret that both players and marines can use goes here.

//To do
//Create a variant of the marine that is always on the turret until killed, at which point he dies and spawns in a turret.
//Make the player unable to crouch while on the gun.
//Fix the dynamic light weirdness caused by making muzzle flash lights spawn when players or marines fire the turret.

Extend Class SmartMarine
{
	Actor NearbyTurret;
	Bool IsOnTurret; //Used to unmount the marine from the gun when he dies.
	Int WaitForTurret;
	
	Protected Void A_RemoveMarineFromTurret()
	{
		If (IsOnTurret && NearbyTurret)
		{
			NearbyTurret.A_ChangeLinkFlags (False,False);
			Warp(NearbyTurret,-NearbyTurret.Radius*2); //Warp the marine at about the same position he is visibly at while on the turret.
			SmartMarineMGTurret(NearbyTurret).IsInUse = False;
			NearbyTurret.Angle = Angle;
			NearbyTurret.Pitch = Pitch;
			Speed = Default.Speed;
			IsOnTurret = False;
			bDontThrust = False;
			NearbyTurret = Null;
		}
	}
	
	States
	{
		RunToTurret:
			PLAY AAABBBCCCDDD 1
			{
				A_Face (NearbyTurret);
				VelFromAngle(); //Move towards the turret.
				
				If (SmartMarineMGTurret(NearbyTurret).IsInUse) {NearbyTurret = Null; Return ResolveState ("See");} //Stop going to the turret if another marine or player gets on it.
				
				If (NearbyTurret && Distance2D (NearbyTurret) <= 64 && WaitForTurret <= 0) //Once in range of the turret and if it isn't being "used", "use" it yourself.
				{
					A_Log ("Gotcha");
					
					A_StartSound ("Turret/Ready",CHAN_WEAPON); //The sound of getting on the gun.
					//Turret status changes.
					NearbyTurret.A_ChangeLinkFlags (True,True); //Make the turret totally invisible and unable to be found by other marines while in use.
					SmartMarineMGTurret(NearbyTurret).IsInUse = True; //Mark the gun as being used.
					
					//Marine status changes.
					IsOnTurret = True; //Mark the marine as being on the turret.
					bDontThrust = True; //The marine isn't thrust around.
					Warp (NearbyTurret,angle:NearbyTurret.Angle,WARPF_COPYPITCH|WARPF_STOP); //The marine warps into the turrets' position and angle and pitch, and stops.
					A_SetSpeed (0); //Set the speed to 0.
					Return ResolveState ("MarineTurretReady"); //The marine begins "using" the turret.
				}
				Return ResolveState(Null);
			}
			Loop;
			
		MarineTurretReady: //Literally just a delay to audibly play the sound without the marine only firing in bursts.
			MTUR B 10;
		MarineTurret:
			MTUR BBBBBBBB 4 A_SMarineLook (True,"MarineTurretAttack");
			MTUR B 0 A_SetAngle (Angle+RandomPick(0,0,0,0,20,-20)); //May turn around.
			MTUR B 0//Chance of leaving the turret if no enemy is seen.
			{
				If (!CheckSight (Target,SF_SEEPASTSHOOTABLELINES) || Target.Health <= 0)
				{
					If (Random (0,256) <= 24) {Return ResolveState ("LeaveTurret");}
				}
				Return ResolveState(Null);
			}
			Goto MarineTurret+1;
		
		MarineTurretAttack:
			#### # 0 A_FaceTarget (10,10);
			#### # 0 A_AttachLight ('MGLight',DynamicLight.PointLight,"FF4700",RandomPick (56,64,72,88),0,DynamicLight.LF_Attenuate,(0,0,32));
			MTUR C 3 A_SpawnProjectile ("SmartMarineMGBullet",38,4,FRandom (1.0,-1.0),CMF_AIMDIRECTION,FRandom(1.3,-1.3));
			#### # 0 A_StartSound ("Turret/Fire",CHAN_WEAPON);
			#### # 0 A_RemoveLight ('MGLight');
			
			#### # 0 A_FaceTarget (10,10);
			#### # 0 A_AttachLight ('MGLight',DynamicLight.PointLight,"FF4700",RandomPick (88,64,72,88),0,DynamicLight.LF_Attenuate,(0,0,32));
			MTUR D 3 A_SpawnProjectile ("SmartMarineMGBullet",38,-4,FRandom (1.0,-1.0),CMF_AIMDIRECTION,FRandom(1.3,-1.3));
			#### # 0 A_StartSound ("Turret/Fire",CHAN_WEAPON);
			#### # 0
			{
				A_RemoveLight ('MGLight');
				
				//If there is no target, or he is dead, or not visible, then have a chance to stop shooting. Or that is what it should do at least.
				If (!Target || Target.Health <= 0 || !CheckSight (Target,SF_SEEPASTSHOOTABLELINES))
				{If (Random (0,255) >= 128) {Return ResolveState ("MarineTurret");}}
				Return ResolveState(Null);
			}
			Loop;
		
		LeaveTurret:
			#### # 0 A_RemoveMarineFromTurret();
			Goto Wander;
	}
}

//The code that makes the turret usable by marines was originally written by Lewisk3. Modified by me. The weapon is mostly written by me.

Class SmartMarineMGTurret : Actor
{
	Actor operator;
	uint active_frame; // Switches between not active, active and firing.
	Bool IsInUse; //Only really used when players are using it.
	Bool curbarrel; //Makes the gun visibly change firing sprites, yes, it's out of sync from the first person weapon. No, I will not try to sync it.

	Default
	{
		//$Title Machine Gun Emplacement
		//$Category Weapons
		//$Angled
		//$Sprite MTURA1
		Height 56;
		ProjectilePassHeight 1; //Projectiles ignore the turret.
		+INTERPOLATEANGLES;
		+Solid;
		-Shootable;
	}
	
	Void TakeOperator(Actor User)
	{
		Operator = User;
		Operator.A_SetSpeed(0);   // Stop operator from moving.
		Operator.Player.Vel *= 0; // Stop Bobbing.
		Operator.A_SetScale(0);   // Hide operator.
		A_StartSound ("Turret/Ready",CHAN_WEAPON); //Because playing the sound from the gun doesn't work.
		Translation = Operator.Translation; //So the color of the player on and out of the gun are the same, instead of only the default green.
		bSolid = False;
		IsInUse = True; //Mark the gun as being used.
		
		SmartMarineMGWeapon.Enable(User);
	}
	
	Void RemoveOperator(Actor User)
	{
		a_log ("GET OFF OF ME");
		// Restore operator status.
		Operator.A_SetSpeed(User.Default.Speed);
		Operator.A_SetScale(User.Default.Scale.X);
		
		// Remove gun
		Let Gun = SmartMarineMGWeapon(Operator.FindInventory("SmartMarineMGWeapon"));
		If(Gun) Gun.Disable();
		
		// Remove operator.
		Operator = Null;
		bSolid = True; //Become solid again.
		IsInUse = False; //Unmark it as being used.
		Translation = Default.Translation; //Reset the translation.
	}
	
	Override Bool Used(Actor User)
	{
		//If (!IsInUse || operator.player.ReadyWeapon Is "SmartMarineMGWeapon")
		//{
			If(!Operator)
				TakeOperator(User);
			Else If (User == Operator) // Only allow the operator to exit themselves.
				RemoveOperator(User);
		//}
			
		Return False;
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		Active_Frame = 0;
		
		If(!Operator) Return;
		
		// Remove dead operator.
		If (Operator.Health <= 0) 
		{
			RemoveOperator(Operator);
			Return;
		}
		
		Angle = Operator.Angle;
		
		// Update operator position.
		Double Dist = 16;
		Vector3 DesiredPos = (RotateVector((Dist,0), Angle), 0);
		Operator.SetOrigin (Level.vec3offset(Pos, DesiredPos), True);
		Pitch = Operator.Pitch; //Get the operators' pitch.
		
		// Update turret graphics
		If(Operator) 
		{
			Active_Frame = 1;
			
			// Figure out if operator is firing their weapon.
			If (Operator.Player)
			{
				Let Weap = Operator.Player.ReadyWeapon;
				Let PSP = Operator.Player.GetPSprite(PSP_WEAPON);
				If(PSP.CurState == Weap.ResolveState("Fire"))
				{
					Active_Frame = 2 + CurBarrel;
					CurBarrel = !CurBarrel;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			MTUR "#" 1
			{
				Frame = Active_Frame;
			}
			Loop;
	}
}

//Completely redo the states block on this weapon actor.
class SmartMarineMGWeapon : Weapon
{
	Default
	{
		Weapon.BobRangeX 0.0;
		Weapon.BobRangeY 0.0;
		Weapon.Kickback 128;
		Weapon.SelectionOrder 1;
		Weapon.SlotPriority 50000;
		AttackSound "Turret/Fire";
		Decal "SmartMarineMGChip";
		+Weapon.DontBob;
		+Weapon.Ammo_Optional;
		+Weapon.BFG;
		+Weapon.CheatNotWeapon;
		+Weapon.NoDeathDeselect;
		+Weapon.NoDeathInput
	}
	
	Static Const String CheatMessages[] =
	{
		"Cheaters never prosper.",
		"You wouldn't download a machine gun.",
		"https://youtu.be/rGBEoFwlbwg",
		"doom smart marines machine gun console command free download 100% legit no malware"
	};
	
	Bool Legit; //If this wasn't on when the weapon was attached to the player, then a random cheat message is given.
	
	Static Void Enable(Actor User)
	{
		Let Gun = Weapon(Actor.Spawn("SmartMarineMGWeapon"));
		User.AddInventory(Gun);
		Gun.Use(False);
		SmartMarineMGWeapon(Gun).Legit = True;
		
		// Used for instantly switching to this weapon
		// from any other weapon.
		If(User.Player)
		{
			Weapon.DoReadyWeaponToSwitch(User.Player, True);
			User.Player.ReadyWeapon = Gun;
		}
	}
	
	Override Void AttachToOwner (Actor Other)
	{
		If (!Legit) {Console.Printf ("%s",CheatMessages[Random(0,3)]);}
		Super.AttachToOwner (Other);
	}
		
	void Disable()
	{
		Owner.RemoveInventory(self);
		GoAwayAndDie();
	}
	
	States
	{
		
		Ready:
			MTUR E 1 A_WeaponReady();
			Loop;
		
		Select:
			MTUR E 1 A_Raise(WEAPONTOP);
			Goto Ready;
		
		Deselect:
			Goto Ready;
		
		Fire:
			MTUR F 3 Light ("MarineMGFiringLight")
			{
				A_Overlay (PSP_WEAPON+2,"FireGlow");
				A_Overlay (PSP_WEAPON-2,"MuzzleFlash");
				
				A_Overlay (PSP_WEAPON-3,"LightGlow");
				A_OverlayFlags (PSP_WEAPON-3,PSPF_RENDERSTYLE|PSPF_PIVOTPERCENT,True);
				A_OverlayRenderStyle(PSP_WEAPON-3, STYLE_Add);
				A_OverlayPivotAlign (PSP_WEAPON-3,PSPA_CENTER,PSPA_CENTER);
				A_OverlayScale (PSP_WEAPON-3,2,2);
				A_WeaponOffset(0, 2, WOF_ADD|WOF_INTERPOLATE);
				A_QuakeEx (1,1,1,4,0,32,"");
				
				A_StartSound ("Turret/Fire",CHAN_WEAPON);
				A_FireProjectile ("SmartMarineMGBullet",FRandom (1.0,-1.0),spawnofs_xy:-4,pitch:FRandom(1.3,-1.3));
			}
			MTUR E 3 Light ("MarineMGFiringLight")
			{
				A_WeaponOffset(0, 2, WOF_ADD|WOF_INTERPOLATE);
				A_StartSound ("Turret/Fire",CHAN_WEAPON);
				A_FireProjectile ("SmartMarineMGBullet",FRandom (1.0,-1.0),spawnofs_xy:4,pitch:FRandom(1.3,-1.3));
			}
			TNT1 A 0 A_WeaponOffset(0, 32, WOF_INTERPOLATE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
				
		MuzzleFlash:
			MTUR G 3
			{
				A_OverlayOffset (PSP_WEAPON-2,OverlayX(OverlayID())-16,flags:WOF_KEEPY);
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				A_OverlayRotate(OverlayID(), FRandom(-20,20));
				//A_OverlayScale (OverlayID(),FRandom(0.5,1.0),flags:WOF_KEEPY);
			}
			MTUR G 3
			{
				A_OverlayOffset (PSP_WEAPON-2,OverlayX(OverlayID())+16,flags:WOF_KEEPY);
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				A_OverlayRotate(OverlayID(), FRandom(50,80));
				//A_OverlayScale (OverlayID(),FRandom(0.5,1.0),flags:WOF_KEEPY);
			}
			Stop;
		
		FireGlow:
			MTUR K 3
			{	
				A_OverlayFlags(OverlayID(), PSPF_RENDERSTYLE, True);
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				A_OverlayFlags(OverlayID(), PSPF_ALPHA, True);
			}
			MTUR H 3;
			Stop;
		
		LightGlow:
			MTUR I 6;
			Stop;
	}
}

Class SmartMarineMGBullet : FastProjectile
{
	Default
	{
		Radius 4;
		Height 8;
		Speed 200;
		Scale 0.25;
		DamageFunction (Random (20,40)/10); //A ripper damages an actor with a total radius of 64 MU, 10 times, hence dividing the random damage output by 10.. 
		ProjectileKickback 96;
		Projectile;
		MissileHeight 8;
		Decal "SmartMarineMGChip";
		+Ripper;
	}
	Int RipAmount;
	Const Rips = 3; //How many actors it'll rip.
	Override Int SpecialMissileHit (Actor Victim)
	{
		//Make the bullets not harm allies.
		If (Victim && Target && (!Target.IsHostile (Victim) || Target.IsFriend(Victim))) {a_log ("no friendly fire");Return 1;} //Don't harm the shooter or allies.
		
		If (Victim.SpawnHealth() <= 200) {bExtremeDeath = True;} //Obliterate any weak enemy.
		
		If (Victim.SpawnHealth() >= 500 || RipAmount > Rips*10) {bRipper = False;}
		
		RipAmount++;
		
		If (Random (0,256) >= 128+48) {bPainLess = True;} //So monsters aren't frozen in pain from the amount of bullets hitting them.
		Return -1;
	}
	//Creates the tracer trail.
	Override Void Tick()
	{
		If (IsFrozen()) {Return;}
		Vector3 oldPos = pos;        
		Super.Tick();
		If (GetAge() < 1) {Return;} //So the trail doesn't spawn way behind the shooter.
		Vector3 path = level.vec3Diff( pos, oldPos );
		double distance = path.length() / 4; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );        
		for( int i = 0; i < steps; i++ )  
		{
			actor mo = Spawn("SmartMarineMGTracer", oldPos );        
			oldPos = level.vec3Offset( oldPos, direction );
		}
	}
	States
	{
		Spawn:
			BAL1 A -1 Light ("MarineMGTracerLight");
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}

Class SmartMarineMGTracer : Actor
{
	Default {RenderStyle "Add"; Scale 0.5; +NoBlockmap;}
	Override Void Tick()
	{
		If (IsFrozen()) {Return;}
		If (GetAge() >= 1)//This number determines the tracers' length.
		{Destroy();}
	}
	States
	{
		Spawn:
			MTUR J -1;
			Stop;
	}
}