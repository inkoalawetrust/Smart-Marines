//Marine_Turret.zsc was getting way too long. So the standalone turret marine is defined here instead.

//Stop the game from just freezing and stopping when friendly turret marines are alerted by a player noise.

Class SmartMarineTurret : SmartMarine
{
	Default
	{
		//$Title AI Marine (Stationary)
		//$Category Marines
		//$Sprite MTURB1
		Health 120;
		GibHealth 20;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.98;
		Mass 100;
		Speed 0;
		PainChance 0;
		PainThreshold 0;
		FriendlySeeBlocks 20;
		MaxTargetRange 8192;
		MinMissileChance 100;
		Tag "Marine NPC on a Turret";
		Species "SmartMarine";
		Decal "SmartMarineMGChip";
		Obituary "%o was obliterated by a marines' 50 caliber machine gun.";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		DamageFactor "MarineHMG", 1.5; //Fares slightly better due to the turret being between him and the bullets.
		Monster;
		+MissileMore;
		+MissileEvenMore;
		+NoInfightSpecies;
		+FloorClip;
		+DontThrust;
		+NeverRespawn;
		+NoPain;
	}
	
	String User_TurretMarineColor;
	
	Override Void Tick ()
	{
		Super.Tick();
		
		If (bFriendly) {Species = "SmartMarineFriend";} Else {Species = Default.Species;}
		If (Target && Target.Health <= 0) {Target = Null;}
	}
	
	Override Bool Used (Actor User)
	{
		If (bKilled) {Return False;}
		Return True;
	}
	
	Protected Void A_TurretMarineDie()
	{
		Actor Turret;
		Turret = Spawn ("SmartMarineMGTurret",Pos);
		Turret.Angle = Angle;
		Turret.Pitch = Pitch;
		Warp (Self,-Self.Radius*2);
	}
	
	Override Void OnDestroy()
	{
		A_TurretMarineDie();
		Super.OnDestroy();
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		//This has to be done because user variables aren't inherited.
		
		If (!User_TurretMarineColor || User_TurretMarineColor ~== "") {Return;}
		
		If (User_TurretMarineColor ~== "Random")
		{
			Static Const String ColorArray[] = {"Red","Gray","White","Black","Blue","Yellow","Orange","Pink","DarkGreen"};
			
			User_TurretMarineColor = ColorArray[Random(0,8)];
		}

		A_SetTranslation (String.Format("Marine_%s", User_TurretMarineColor));
	}
	
	States
	{
		Spawn:
			MTUR BBBB 4 A_SMarineLook(False,"Missile",True);
			#### # 0 //Only sometimes turn around the turret.
			{
				If (Random (0,256) > 230)
				{
					A_SetAngle (Angle+RandomPick(30,20,-20,-30));
					A_Log ("I turned");
				}
			}
			Loop;
		See:
		Idle: //This state could've probably saved me tons of grief making the marine AI.
			MTUR BBBB 4
			{
				/*If (!bFriendly) {*/A_SMarineLook(jumpto:"Missile",True,True,True);//}
				//Else {A_Chase ("Missile","Missile",CHF_DONTMOVE);}
				a_log ("bing chilling");
			}
			#### # 0 {If (Target) {A_FaceTarget(10,10);}}
			#### # 0 //Only sometimes turn around the turret.
			{
				If (Random (0,256) > 210)
				{
					A_SetAngle (Angle+RandomPick(30,20,-20,-30));
					A_Log ("I turned");
				}
			}
			Loop;
		
		Missile: //More or less pasted over from the normal marines, so these ones are similar in behavior.
			#### # 0 A_FaceTarget (10,10);
			#### # 0 A_AttachLight ('MGLight',DynamicLight.PointLight,"FF4700",RandomPick (56,64,72,88),0,DynamicLight.LF_Attenuate,(0,0,32));
			MTUR C 3 A_SpawnProjectile ("SmartMarineMGBullet",38,4,FRandom (1.0,-1.0),CMF_AIMDIRECTION,FRandom(1.3,-1.3));
			#### # 0 A_StartSound ("Turret/Fire",CHAN_WEAPON);
			#### # 0 A_RemoveLight ('MGLight');
			
			#### # 0 A_FaceTarget (10,10);
			#### # 0 A_AttachLight ('MGLight',DynamicLight.PointLight,"FF4700",RandomPick (88,64,72,88),0,DynamicLight.LF_Attenuate,(0,0,32));
			MTUR D 3 A_SpawnProjectile ("SmartMarineMGBullet",38,-4,FRandom (1.0,-1.0),CMF_AIMDIRECTION,FRandom(1.3,-1.3));
			#### # 0 A_StartSound ("Turret/Fire",CHAN_WEAPON);
			#### # 0
			{
				A_RemoveLight ('MGLight');
				
				//If there is no target, or he is dead, or not visible, then have a chance to stop shooting. Or that is what it should do at least.
				If (!Target || Target.Health <= 0 || !CheckSight (Target,SF_SEEPASTSHOOTABLELINES))
				{If (Random (0,255) >= 128*FRandom (0.8,1.2)) {;Return ResolveState ("Idle");}}
				Return ResolveState(Null);
			}
			Loop;
		
		Death: //Make the dead marine warp backwards and spawn a turret in his death states, giving the illusion of him being killed while on the turret.
			PLAY H 5 A_TurretMarineDie();
			PLAY I 5 A_StartSound("Marine/Death",CHAN_VOICE);
			PLAY J 5 A_NoBlocking();
			PLAY KLM 5;
			PLAY N -1;
			Stop;
		
		XDeath:
			PLAY O 5 A_TurretMarineDie();
			PLAY P 5 A_StartSound("Marine/XDeath",CHAN_VOICE);
			PLAY Q 5 A_NoBlocking();
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		
		GenericFreezeDeath:
			PLAY A 0 A_TurretMarineDie();
			Goto Super::GenericFreezeDeath;
	}
}