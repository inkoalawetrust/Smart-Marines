//Miscellaneous things that may not fit into any particular group, and may not warrant their own file.

Extend Class SmartMarine
{
	//Handles the coloring of the marines.
	Protected Void HandleMarineColoring()
	{
		If (!User_Color || User_Color ~== "") {Return;} //Don't run the code if User_Color is empty.
		
		//Handles the random color choice that is performed if the color name given is "Random".
		If (User_Color ~== "Random")
		{
			Static Const String ColorArray[] = {"Red","Gray","White","Black","Blue","Yellow","Orange","Pink","DarkGreen"}; //Contains all the valid color names.
			
			User_Color = ColorArray[Random(0,8)]; //Randomly picks a color string.
		}

		A_SetTranslation (String.Format("Marine_%s", User_Color));
	}
		
	//Called on PostBeginPlay(), sets the default values for the two integer user variables, and handles User_RandomPersonality's behaviour.
	Protected Void SetUserVariableDefaults()
	{
		If (User_AttentionSpan <= 0) {User_AttentionSpan = 200;}
		If (User_GrenadeThreshold <= 0) {User_GrenadeThreshold = 240;}
		
		If (User_RandomPersonality)
		{
			If (User_AttentionSpan <= 0) {User_AttentionSpan += Random (-50,50);}
			If (User_GrenadeThreshold <= 0) {User_GrenadeThreshold += Random (-50,50);}
			If (!User_Color || User_Color ~== " ") {User_Color = "Random";}
			If (!User_NoGrenade){User_NoGrenade = Random (0,1);}
			If (!User_NoMelee){User_NoMelee = Random (0,1);}
			If (!User_NoRetreat){User_NoRetreat = Random (0,1);}
			If (!User_Persistent){User_Persistent = Random (0,1);}
			If (!User_NoSwim){User_NoSwim = Random (0,1);}
			If (!User_Fearless){User_Fearless = Random (0,1);}
			If (!User_NoTaunt){User_NoTaunt = Random (0,1);}
			If (!User_NoMookTaunt){User_NoMookTaunt = Random (0,1);}
			If (!User_DontUseTurrets) {User_DontUseTurrets = Random (0,1);}
		}
	}
	
	//Unmount the marine when erased from existance.
	Override Void OnDestroy()
	{
		A_RemoveMarineFromTurret();
		A_RemoveLight ('MGLight');
		Super.OnDestroy();
	}
	
	//Or when killed.
	Override Void Die (Actor Source, Actor Inflictor, Int DmgFlags, Name MeansOfDeath)
	{
		A_RemoveMarineFromTurret();
		A_RemoveLight ('MGLight');
		Super.Die (Source, Inflictor, DmgFlags, MeansOfDeath);
	}
	
	States
	{
		Pain: //Life
			TNT1 A 0 A_JumpIf (IsOnTurret,"MarineTurret"); //The NoPain flag doesn't work somehow.
			PLAY G 6;
			PLAY G 6 A_StartSound("Marine/Pain",CHAN_VOICE);
			Goto See;
		
		Death: //Oof
			PLAY H 5 A_ClearTarget();
			PLAY I 5 A_StartSound("Marine/Death",CHAN_VOICE);
			PLAY J 5 A_NoBlocking();
			PLAY KLM 5;
			PLAY N -1;
			Stop;
		
		XDeath: //Mega oof
			PLAY O 5 A_ClearLastHeard(); //This makes no sense, why can't ZScript code nullify the LastHeard pointer when the marine is gibbed, but native C++ code that does the exact same works ?
			PLAY P 5 A_StartSound("Marine/XDeath",CHAN_VOICE);
			PLAY Q 5 A_NoBlocking();
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		
		Raise: //Resurrected
			PLAY K 5;
			PLAY JIH 5;
			Goto See;
		
		GenericFreezeDeath:
			PLAY A 0;
			Goto Super::GenericFreezeDeath;
	}
}