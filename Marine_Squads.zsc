Extend Class SmartMarine
{
	//Sets up a squad leaders' squad during PostBeginplay().
	Void InitializeSquad()
	{
		//If you are a squad leader.
		If (User_Leader && User_SquadName)
		{
			Let SquadList = SM_SquadHandler(EventHandler.Find("SM_SquadHandler"));
			//Check if you are the leader of an existing squad, which of course already has a leader.
			If (!SquadList.IsSquadNameUsed (User_SquadName))
			{
				Squad = New('SM_MarineSquad'); //Create the container class.
				SquadList.MarineSquads.Push(Squad); //Add the new squad to the squad list.
				
				Squad.Leader = Self; //Assign yourself as the squad leader.
				
				Squad.Name = User_SquadName; //Set the squads' name to the one in your user variable.
				
				Squad.Members.Push(Self); //Add yourself to the member list.
				
				//Give yourself an icon if friendly to any player.
				If (bFriendly)
				{
					Icon = Spawn ("SmartMarineLeaderIcon",(Pos.X,Pos.Y,Pos.Z+Height));
					If (Icon)
						Icon.Master = Self;
				}
			}
			Else
			{
				Console.Printf ("\ckWARNING: The squad called \"%s\" already has a leader !",User_SquadName);
				User_Leader = False; //Can't have a squad with multiple leaders.
				SM_FindSquadmates(); //Now join the squad as a normal member instead.
			}
		}
	}
	//This runs rougly every second when a marine has a squad he should be in, and is not a squad leader himself. So that he can join said squad.
	Void SM_FindSquadmates ()
	{
		If (!User_SquadName || User_SquadName ~== "")
			Return;
		
		Let SquadList = SM_SquadHandler(EventHandler.Find("SM_SquadHandler"));
		SM_MarineSquad DaSquad;
		
		For (Int I = SquadList.MarineSquads.Size()-1; I >= 0; I--)
		{
			DaSquad = SquadList.MarineSquads[I];
			
			If (DaSquad && DaSquad.Name ~== User_SquadName)
			{
				If (!DaSquad.IsInSquad(Self))
				{
					//First, check if the squad is hostile to you.
					If (IsHostile(Actor(DaSquad.Leader)))
					{
						Console.Printf ("\ckWARNING: There are hostile and friendly marines that share the \"%s\" squad name !",User_SquadName);
						User_SquadName = ""; //Stop trying to join an enemy squad.
						Return;
					}
					
					//If at least someone in your new squad is alive.
					If (!DaSquad.IsEveryoneDead())
					{
						Master = DaSquad.Leader; //Then make the squads' leader your boss.
						CurrentMarineOrder = ORDER_NONE; //And ignore the players' commands if friendly.
						
						//Give yourself an icon if friendly to any player.
						If (bFriendly)
						{
							Icon = Spawn ("SmartMarineSquadIcon",(Pos.X,Pos.Y,Pos.Z+Height));
							If (Icon)
								Icon.Master = Self;
						}
					}
					//Otherwise, if everyone in the squad is dead already, make yourself the squad leader, so you don't follow around a corpse.
					Else
						DaSquad.MakeSquadLeader(Self);
					DaSquad.Members.Push(Self); //Add yourself to the members array.
				}
			}
		}
	}
	
	//Makes marines in squads and their leaders alert the rest of their squad of an enemy.
	Void SM_AlertSquadmates ()
	{
		If (!(Master Is "SmartMarine"))
			Return;
		
		If (Target.CountInv ("SM_DontWarnOthers") > 0) Return; //Don't warn other marines if the target has this token.
		
		If (Master && SmartMarine(Master).Squad)
			SmartMarine(Master).Squad.AlertSquad(Self);
		Else If (Squad && Squad.Leader == Self)
			Squad.AlertSquad(Self);
	}
	
	//Doesn't really belong in MarineFunctions, because it only handles the marines' movement when they are in a squad.
	Void SM_Chase ()
	{
		Bool FollowPlayers; //The value of DontFollowPlayers before the function modifies it.
		FollowPlayers = bDontFollowPlayers;
		
		//Don't run this if the marine doesn't have a squad leader, or has a patrol point.
		If (Master && Master Is "SmartMarine" && SmartMarine(Master).Squad && !Goal)
		{
			bDontFollowPlayers = True; //Don't follow the player when in a squad, only your leader.
			//If you have a target, then follow your leader if he is further than 640 map units, but don't get too close.
			If (Target && Target != Goal)
			{
				//While in combat, follow your leader if you are too far away, but also don't get right up in his face all the time.
				//If your target is something scary, then keep more distance from your leader, to avoid getting your squad killed by the powerful foe.
				//Also, you don't need to follow your leader when he is too far if he is simply running to reload or to avoid a grenade.
				If (!SM_LeaderRunning() && !bFrightened && Distance3DSquared(Master) >= 640*640 && !(Distance3DSquared(Master) <= 304*304) ||
				!SM_LeaderRunning() && bFrightened && Distance3DSquared(Master) >= 1024*1024 && !(Distance3DSquared(Master) <= 400*400))
				{
					SM_MoveTowards (Master);
					A_Chase ("RifleSmack","DecideAttack",CHF_DONTIDLE|CHF_DONTMOVE);
					bDontFollowPlayers = FollowPlayers;
					Return;
				}
				//If you are too close to your leader or close enough to him, then go back to normal A_Chase.
				Else
				{
					A_Chase ("RifleSmack","DecideAttack",CHF_DONTIDLE);
					bDontFollowPlayers = FollowPlayers;
					Return;
				}
			}
			//If you have no target currently, but are still in your See state.
			Else If (!Target && !Goal)
			{
				If (Distance3DSquared(Master) >= 512*512)
				{
					SM_MoveTowards (Master);
					A_Chase ("RifleSmack","DecideAttack",CHF_DONTIDLE|CHF_DONTMOVE);
					bDontFollowPlayers = FollowPlayers;
					Return;
				}
				Else
				{
					A_Chase ("RifleSmack","DecideAttack",CHF_DONTIDLE);
					bDontFollowPlayers = FollowPlayers;
					Return;
				}
			}
		}
		//If you are not even in a squad, then just use standard A_Chase.
		Else
			A_Chase ("RifleSmack","DecideAttack",CHF_DONTIDLE);
	}
	
	//Ditto
	Void SM_Wander ()
	{
		Bool FollowPlayers;
		FollowPlayers = bDontFollowPlayers;
		//If you are in a squad.
		If (Master && Master Is "SmartMarine" && SmartMarine(Master).Squad)
		{
			bDontFollowPlayers = True;
			//Move towards your squad leader if you are too far away from him.
			If (Distance3DSquared(Master) >= 1024*1024)
			{
				SM_MoveTowards (Master);
				bDontFollowPlayers = FollowPlayers;
				Return;
			}
			//If you are not too far away, or you are TOO close to him, then wander normaly.
			Else
			{
				A_Wander();
				bDontFollowPlayers = FollowPlayers;
				Return;
			}
		}
		
		A_Wander(); //Wander normally if not in a squad.
	}
	
	//Temporarily changes the marines' target to the other actor, so that he will move towards it without chasing it.
	Void SM_MoveTowards (Actor Other)
	{
		If (!Other) Return;
		
		OriginalTarget = Target;
		Target = Other;
		NewChaseDir();
		FaceMovementDirection();
		Target = OriginalTarget;
		OriginalTarget = Null;
	}
	
	Bool SM_LeaderRunning()
	{
		Return (SmartMarine(Master).SM_IsInState ("RunAway") || RunningToReload);
	}
	
}

/*======================================================================================================
This class is the data container each squad in the game uses, the squads' leader always has a pointer to
it, and other members of the squad can also access this container by doing "SmartMarine(Master).Squad",
because marines have their squad leader set as their master.
======================================================================================================*/
Class SM_MarineSquad Play
{
	String Name; //The name of the squad.
	Array<SmartMarine> Members; //Me and the boys.
	SmartMarine Leader; //A pointer to the squads' leader in particular.
	
	//Called when the marine is killed or removed, if the marine is the leader of a squad, then the healthiest member of the squad will become the new leader.
	Void AssignNewSquadLeader (SmartMarine Caller)
	{
		Let SquadList = SM_SquadHandler(EventHandler.Find("SM_SquadHandler"));
		
		//Non-leaders can't mess with who runs the squad.
		If (!Caller.User_Leader || !Caller)
			Return;
		
		//You are the last member of the squad left. So remove the squad.
		If (Members.Size() == 0)
		{
			If (Caller.Squad)
				SquadList.RemoveSquad (Caller.Squad);
			Caller.Squad = Null;
			If (Caller.Icon)
				Caller.Icon.Destroy();
			Destroy();
			Return;
		}
		
		//Iterate through the whole squad, and keep assigning the marine with the highest health you found as the next leader.
		SmartMarine NextLeader = Members[0];
		
		For (Int I = Members.Size()-1; I >= 0; I--)
		{
			//This marine is gibbed, so he cannot be possibly resurrected.
			If (Members[I] && NextLeader && Members[I].Health <= Members[I].GetGibHealth())
				LeaveSquad(Members[I]); //So just remove him from the squad.
			Else If (Members[I] && NextLeader && Members[I].Health > NextLeader.Health)
				NextLeader = Members[I];
		}
		
		//If the above search didn't return a single marine who hasn't been gibbed already. Then remove the squad.
		If (!NextLeader)
		{
			If (Caller.Squad)
				SquadList.RemoveSquad (Caller.Squad);
			Caller.Squad = Null;
			If (Caller.Icon)
				Caller.Icon.Destroy();
			Destroy();
			Return;
		}
		
		MakeSquadLeader(NextLeader); //https://www.youtube.com/watch?v=dvA-mimf2yg
	}
	
	//Checks if the specified marine is the squads' leader or a part of the members array.
	Bool IsInSquad (SmartMarine Marine)
	{
		Return (Marine == Leader || Members.Find(Marine) != Members.Size());
	}
	
	//Checks if everyone in the squad is dead, returns false if at least one marine is alive.
	//The exception parameter is for resurrected marines to assign themselves as leader if everyone besides them is dead.
	Bool IsEveryoneDead (SmartMarine Exception = Null)
	{
		If (!Exception)
		{
			For (Int I = Members.Size()-1; I >= 0; I--)
			{
				If (Members[I] && Members[I].Health > 0)
					Return False; //A live marine was found.
			}
		}
		Else
		{
			For (Int I = Members.Size()-1; I >= 0; I--)
			{
				If (Members[I] && Members[I] != Exception && Members[I].Health > 0)
					Return False; //A live marine was found.
			}
		}
		
		Return True;
	}
	
	//Assign the specified marine as the new squad leader.
	Void MakeSquadLeader (SmartMarine Marine)
	{
		If (!Marine)
		{
			Console.Printf ("\ckWARNING: Tried to assign a non-existent marine as the leader of a squad.");
			Return;
		}
		
		//Demote the current leader.
		Leader.User_Leader = False;
		Leader.Squad = Null;
		If (Leader.Icon)
			Leader.Icon.Destroy();
		Leader = Null;
		
		//And make the specified marine the leader.
		Marine.Master = Null;
		Marine.Squad = Self;
		Marine.User_Leader = True;
		Leader = Marine;
		
		//If the marine already had an icon beforehand.
		If (Marine.Icon)
			Marine.Icon.Destroy(); //Destroy it.
		
		Marine.Icon = Actor.Spawn ("SmartMarineLeaderIcon",(Marine.Pos.X,Marine.Pos.Y,Marine.Pos.Z+Marine.Height));
		Marine.Icon.Master = Marine;
		If (Marine.Health <= 0) //Make the icon invisible if the new squad leader is already dead.
			Marine.Icon.Alpha = 0.0;
		
		//Go through the rest of the squad and assign the new marine as their leader.
		For (Int I = Members.Size()-1; I >= 0; I--)
		{
			If (Members[I] && Members[I] != Marine)
				Members[I].Master = Marine;
		}
	}
	
	//Makes a specific marine leave the squad.
	Void LeaveSquad (SmartMarine Marine)
	{
		If (!Marine) Return;
		
		Members.Delete(Members.Find(Marine));
		Marine.User_SquadName = "";
		Marine.Master = Null;
		
		If (Marine.Icon)
			Marine.Icon.Destroy();
	}
	
	//Used by friendly squad leaders who are given the stand still command by players, so that the command will be transfered over to the rest of the squad.
	Void StandDownSquad(SmartMarine Caller, Bool RiseUp = False)
	{
		For (Int I = Members.Size()-1; I >= 0; I--)
		{
			If (Members[I] && Members[I] != Caller && Members[I].Health > 0)
				If (!RiseUp)
				{
					Members[I].CurrentMarineOrder = 3; //3 is ORDER_STANDSTILL
					Members[I].TimeSearching = 0;
				}
				Else
					Members[I].CurrentMarineOrder = 0;
		}
	}
	
	//Alert the squad of the calling marines' target, but only alert squad members who don't already have a target.
	//Unlike SM_AlertNearbyMarines, this alerts squadmates regardless of distance.
	Void AlertSquad (SmartMarine Caller)
	{
		Bool Alerted;
		For (Int I = Members.Size()-1; I >= 0; I--)
		{
			If (Members[I] && Members[I] != Caller && Members[I].Health > 0)
			{
				If (Members[I].SM_IsInState ("RunAway") && Members[I].OriginalTarget == Null)
					Members[I].OriginalTarget = Caller.Target; //If running away from a grenade, the OriginalTarget variable is what needs changing.
				
				Else If (!Members[I].SM_IsInState ("RunAway") && Members[I].Target == Null)
				{
					Members[I].Target = Caller.Target;
					If (!Members[I].SM_IsInState ("See") && !Members[I].SM_IsBusy())
						Members[I].SetStateLabel ("See");
				}
				
				Alerted = True;
			}
		}
		
		//If at least one other marine in the squad was alerted.
		If (Alerted)
			If (Random (0,256) == Random (0,256))
					Caller.A_StartSound ("Marine/AlertAlliesAlt",CHAN_VOICE,attenuation:0.75);
				Else
					Caller.A_StartSound ("Marine/AlertAllies",CHAN_VOICE,attenuation:0.75);
	}
}

//This is the event handler that stores pointers to all the SM_MarineSquad classes. So that marines can link up with or create their squad.
Class SM_SquadHandler : EventHandler
{
	Array <SM_MarineSquad> MarineSquads;
	
	//Used to prevent identical squads from forming, or squads from trying to have more than one leader.
	Bool IsSquadNameUsed (String SquadName)
	{
		For (Int I = 0; I < MarineSquads.Size(); I++)
		{
			If (SquadName ~== MarineSquads[I].Name)
				Return True;
		}
		Return False;
	}
	
	//Removes a particular squad from the global squad list.
	Void RemoveSquad (SM_MarineSquad Squad)
	{
		If (Squad)
			MarineSquads.Delete(MarineSquads.Find(Squad));
	}
}