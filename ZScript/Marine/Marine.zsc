//TODO:
//Go to different gunfire states from ShouldAttack():
	//3 round aimed bursts for weak enemies or at a decent distance
	//Maybe even single (Very accurate) shots for large distances
	//Full auto for close quarters or powerful enemies

//IDEA:
//Give marines a dropkick melee, especially when a light enough non-flying enemy is over a ledge, and especially if fall damage is on.
//Give them 3 different grenade types depending on the situation, HE-FRAG, Smoke, and Flashbang.
//Give marines the ability to scale ledges that are almost their height ? Since there's sprites for that in Project Brutality I could use, like the kicks.
//Make marines able to jump over certain obstacles if they can ?
//Make some kind of extra handler addon with actual options, like spawning marines on map startup, replacing items with spawn beacons, etc.

Class SM_Marine : KAI_Humanoid
{
	Default
	{
		//$Title AI Marine
		//$Category Marines
		//$Sprite MARIC1
		Health 100;
		GibHealth 20;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.98;
		Mass 100;
		Speed 8;
		FastSpeed 10;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 48;
		MaxDropOffHeight 48;
		MaxTargetRange 8192;
		MinMissileChance 100;
		Tag "Marine NPC";
		Species "Military";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine.";
		HitObituary "%o got %p head smashed in by a marines' rifle.";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		PainSound "Marine/Pain";
		DeathSound "Marine/Death";
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS; //Marines are only really scared of super dangerous enemies like bosses and enemy vehicles.
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
		+AvoidMelee;
		+AvoidHazards; //This ONLY works for crushing ceilings and NOTHING ELSE. So it's largely useless but I'm still adding it.
		+SeeFriendlyMonsters; //No more ZScript code hacks.
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		MarineState = MARINE_IDLING;
		AmmoCount = 30;
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		If (!(User_Armor ~== "None" || User_Armor ~== "Nothing")) //If the marine doesn't explicitly spawn unarmored.
		{
			If (!User_Armor || User_Armor ~== "" || User_Armor ~== " ") //Default armor.
				GiveInventory ("GreenArmor",1);
			Else
				GiveInventory (User_Armor,1); //Try giving whatever armor available in the current session that the mapper wants.
		}
	}
	
	//Marines have identical criteria for if an actor is hostile as my MVP vehicles do.
	Override Bool IsActorHostile (Actor Other)
	{
		Return (Other && (IsHostile (Other) || IsTargetingAllies (Self, Other)));
	}
	
	//Actions the marine is performing, can be stacked on each other like flags.
	Enum MarineStates
	{
		MARINE_IDLING 	= 1 << 0, //Bing chilling
		MARINE_CHASING	= 1 << 1, //Chasing someone.
		MARINE_WANDER	= 1 << 2, //Wandering
		MARINE_FIRING 	= 1 << 3, //Shooting
		MARINE_THROWING	= 1 << 4, //Throwing a grenade
		MARINE_RELOAD 	= 1 << 5, //Reloading
		MARINE_RETREAT	= 1 << 6, //GTFOing, assumed to be from some danger by default.
		//MARINE_PATROL	= 1 << 7, //Patrolling
	}
	
	Const MARINE_HEARDIST = 4096;
	Const MARINE_FOV = 120;
	Const MAGAZINE_SIZE = 30;
	
	Mixin SM_SplashFunctions;
	Int MarineState; //What the marine doin'.
	Actor NearestEnemy; //The marines' closest enemy, used to stay away from enemies.
	Int AmmoCount; //How much ammo the marine has.
	Int RetreatLoops; //How many times the retreat state is called.
	
	String User_Armor; //The name of the armor the marine should be equipped with upon spawning. Default is the vanilla green armor.
	
	States
	{
		//When the marine is looking around with this animation, he actually changes his sight angle.
		Spawn:
			MARI EEEEEEEE 3 //Look 80 degrees to your left.
			{
				Angle += 80;
				KAI_Look (LOF_NOJUMP,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV);
				Angle -= 80;
				If (Target) SetStateLabel ("See");
			}
			MARI FFFFFFFF 3 //Look 20 degrees to your right.
			{
				Angle -= 20;
				KAI_Look (LOF_NOJUMP,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV);
				Angle += 20;
				If (Target) SetStateLabel ("See");
			}
			MARI GGGGGGGG 3 //Look 80 degrees to your right.
			{
				Angle -= 80;
				KAI_Look (LOF_NOJUMP,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV);
				Angle += 80;
				If (Target) SetStateLabel ("See");
			}
			MARI HHHHHHHH 3 KAI_Look (0,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV); //Just look straight.
			Loop;
		//Idle:
		//Idle.Stay: //Staying around idle. Basically like in the spawn state.
		//Idle.Stay.Alert: //Standing there, menacingly. Maybe use this for if the marine last saw an enemy a few seconds ago ?
		//Idle.Stay.Kneel: //Standing around while kneeling down, can randomly pick this one. TG5 needs to make sprites for me to be able to add it though.
		See:
			TNT1 A 0 SM_SetMarineState (MARINE_CHASING,0,True); //NOTE: Might cause problems if I implement the patrolling state ?
			MARF JJKKLLMM 3 SM_Chase ();
			Goto See+1;
		Fire:
			MARF JJJAA 2; //Aim up.
			MARF A 0 SM_SetMarineState (MARINE_FIRING,MARINE_IDLING|MARINE_THROWING|MARINE_WANDER); //Set marine actions.
			MARF A 2 //Delay
			{
				A_FaceTarget (8,8);
				If (AmmoCount <= 0) //Out of ammo.
				{
					A_StartSound ("VRifle/EmptyGun",CHAN_WEAPON,attenuation:ATTN_STATIC);
					RetreatLoops = Random (6,12);
					Return FindState ("Retreat.Reload"); //Run either far enough or out of sight, to reload.
				}
				
				Return State (Null);
			}
			MARF E 4 Light ("MarineMuzzleFlash") SM_FireBullet();
			MARF A 0
			{
				
				//Run line of fire checks.
			}
			Loop;
		Pain:
			MARA E Random (7,14) A_Pain();
			MARA E 0 SM_SetMarineState (0,MARINE_IDLING|MARINE_THROWING|MARINE_WANDER); //Being hurt interrupts staying idle, wandering, and throwing grenades.
			//MARA E 0 A_JumpIf ((MarineState & MARINE_RELOAD),"Reload"); //Go back to reloading if you were doing that already. IDEA: Or run away a bit ?
			//MARA E 0 A_JumpIf ((MarineState & MARINE_RETREAT),"Retreat"); //Or running.
			Goto See;
	}
}