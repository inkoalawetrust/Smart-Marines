//TODO:

//IDEA:
//Give marines a dropkick melee, especially when a light enough non-flying enemy is over a ledge, and especially if fall damage is on.
//Give them 3 different grenade types depending on the situation, HE-FRAG, Smoke, and Flashbang.
//Give marines the ability to scale ledges that are almost their height ? Since there's sprites for that in Project Brutality I could use, like the kicks.
//Make marines able to jump over certain obstacles if they can ?
//Make some kind of extra handler addon with actual options, like spawning marines on map startup, replacing items with spawn beacons, etc.

Class SM_Marine : KAI_Humanoid
{
	Default
	{
		//$Title AI Marine
		//$Category Marines
		//$Sprite MARIC1
		Health 100;
		GibHealth 20;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.98;
		Mass 100;
		Speed 8;
		FastSpeed 10;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 64;
		MaxDropOffHeight 48;
		MaxTargetRange 8192;
		MinMissileChance 100;
		Tag "Marine NPC";
		Species "Military";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine.";
		HitObituary "%o got %p head smashed in by a marines' rifle.";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		PainSound "Marine/Pain";
		DeathSound "Marine/Death";
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS; //Marines are only really scared of super dangerous enemies like bosses and enemy vehicles.
		//KAI_Actor.Inaccuracy (10,10,10);
		//KAI_Actor.InaccuracyFrequency 1;
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
		+AvoidMelee;
		+AvoidHazards; //This ONLY works for crushing ceilings and NOTHING ELSE. So it's largely useless but I'm still adding it.
		+SeeFriendlyMonsters; //No more ZScript code hacks.
	}
	
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		MarineState = MARINE_IDLING;
		AmmoCount = 30;
		MissileState = FindState ("Fire",True);
		AttackStates.Push (FindState ("Fire",True));
		AttackStates.Push (FindState ("Fire.Loop",True));
		//MeleeState = FindState (""); No melee attacks yet
	}
	
	Override Void Tick()
	{
		Super.Tick ();
		
		If (IsFrozen() || IsDead(Self)) Return;
		
		//Every 4 tics that the marine is in a non-melee attack state, perform target prediction.
		//NOTE: Hmm, should they do target prediction when throwing grenades too ?
		If (/*GetAge() % 4 == 0 && */!(MarineState & MARINE_MELEE) && IsInAttackState())
			AimAtTarget (8/**4*/,8/**4*/,attackspeed:170,200);
		
		If (NextFireDelay && !(MarineState & MARINE_FIRING)) //Decrement the firing delay, if any, for as long as the marine is not shooting.
			NextFireDelay--;
	}
	
	Override Void Die (Actor Source, Actor Inflictor,Int DMGFlags,Name MeansOfDeath)
	{
		Super.Die (Source,Inflictor,DMGFlags,MeansOfDeath);
		
		SM_EndFiring();
	}
	
	Override Void UserVariableDefaults()
	{
		Super.UserVariableDefaults();
		If (!(User_Armor ~== "None" || User_Armor ~== "Nothing")) //If the marine doesn't explicitly spawn unarmored.
		{
			If (!User_Armor || User_Armor ~== "" || User_Armor ~== " ") //Default armor.
				GiveInventory ("GreenArmor",1);
			Else
				GiveInventory (User_Armor,1); //Try giving whatever armor available in the current session that the mapper wants.
		}
	}
	
	Override Bool ShouldAttack (Bool NoStateJump)
	{
		If (!Target) Return False;
		If (!CanAttack()) Return False;
		Vector3 FirePos = (0,-6,42); //Will be changable once I implement kneeling and lying down.
		
		console.printf ("fire delay is %d tics",nextfiredelay);
		//TODO: Use different trace offsets if the marine decides to fire kneeling or lying down. Also double DetermineHitChance accuracy on the Vector4s.
		
		//Go to different gunfire states from ShouldAttack():
			//3 round aimed bursts for weak enemies or at a decent distance
			//Maybe even single (Very accurate) shots for large distances
			//Full auto for close quarters or powerful enemies
			//Maybe also factor in how much damage their actual attack does.
			//And use as many traces as the marines' burst size to estimate the hit chance of a target ?
		//Make the marines use HE-FRAG grenades:
			//With random RNG, for variety.
			//If the rifle is too ineffective against their target.
			//And/Or if they are attacking around a crowd of enemies.
			//If HE would be too ineffective (e.g against Cyberdemons or god mode players), but the target doesn't have +NOPAIN, they will throw flashbangs.
		If (!NextFireDelay && SM_CheckLOF (FirePos)) //Can fire at all.
		{
			Double Dist = Distance3D (Target);
			Int Threat = AssessThreatLevel (Target);
			
			Vector4 SSpread = (0.4,-0.4,0.4,-0.4); //Single shot spread.
			Vector4 BSpread = (1.1,-1.1,1.1,-1.1); //Burst fire spread.
			Vector4 FSpread = (2.2,-2.2,2.2,-2.2); //Full auto spread.
			
			//NOTE: The random numbers allow marines to sometimes decide to use a different sub-optimal firing mode, for variety.
			If (!NoStateJump)
			{
				//If the target is dangerous, or it's at least above normal, and you'd hit it at least 8 times (Counts multiple enemies too, for "crowd control").
				//Fire a burst instead too sometimes.
				Int FullAutoThreshold = (Health <= SpawnHealth()/6) ? 4 : 8; //If low on health, the marines will more desperately fire full auto.
				If (Random (0, 255) >= 8 && (Threat >= THREAT_DANGEROUS ||
				Threat < THREAT_NORMAL && DetermineHitChance (Target,SM_DumbHitCheck,Dist,2.2,15,FirePos,FSpread,MaxTargetRange,DHC_THRUHOSTILES) >= FullAutoThreshold))
				{//https://youtu.be/LPAEgHsJYxk?si=4EdaE-oCczn5ehDD&t=75
					BurstSize = MAGAZINE_SIZE;
					AttackType = FIRE_FULLAUTO;
					a_log ("i have decided to fire in full auto");
				}
				//If your enemy is weak.
				Else If (Random (0, 255) >= 3 && (/*Threat < THREAT_ABOVENORMAL ||*/
				//Or you decided against full auto, but would hit the non-weak enemy at least twice.
				DetermineHitChance (Target, SM_DumbHitCheck, Dist, 1.1, 3, FirePos, BSpread, MaxTargetRange) >= 2))
				{//Then fire a burst.
					BurstSize = 3;
					AttackType = FIRE_BURST;
					a_log ("i have decided to fire a burst");
				}
				Else
				{//Fall back to single accurate shots if neither full auto or bursts would work. Or just fire single shots instead sometimes.
					BurstSize = 1;
					AttackType = FIRE_SINGLE;
					a_log ("i have decided to fire a single shot");
				}
				
				//BurstSize = 3; AttackType = FIRE_BURST; //PLACEHOLDER !!!!!!
				SetStateLabel ("Fire");
			}
			Return True;
		}
		Return False;
	}
	
	//Marines have identical criteria for if an actor is hostile as my MVP vehicles do.
	Override Bool IsActorHostile (Actor Other)
	{
		Return (Other && (IsHostile (Other) || IsTargetingAllies (Self, Other)));
	}
	
	//Actions the marine is performing, can be stacked on each other like flags.
	Enum MarineStates
	{
		MARINE_IDLING 	= 1 << 0, //Bing chilling
		MARINE_CHASING	= 1 << 1, //Chasing someone.
		MARINE_WANDER	= 1 << 2, //Wandering
		MARINE_FIRING 	= 1 << 3, //Shooting
		MARINE_THROWING	= 1 << 4, //Throwing a grenade
		MARINE_MELEE	= 1 << 5, //Beating someone up
		MARINE_RELOAD 	= 1 << 6, //Reloading
		MARINE_RETREAT	= 1 << 7, //GTFOing, assumed to be from some danger by default.
		//MARINE_PATROL	= 1 << 8, //Patrolling
	}
	
	Const MARINE_HEARDIST = 4096; //How far can the marine hear.
	Const MARINE_FOV = 120; //How wide the marine can see.
	Const MAGAZINE_SIZE = 30; //How much ammo does the marine have per magazine ?
	Const MARINE_FIREFOV = 60; //The FOV within which the marine can fire his VelInterceptEx() bullets without looking stupid.
	
	Mixin SM_SplashFunctions;
	
	Int MarineState; //What the marine doin'.
	Actor NearestEnemy; //The marines' closest enemy, used to stay away from enemies.
	Int RetreatLoops; //How many times the retreat state is called.
	Int AimPos; //Where is the marine aiming ? Similar to the TurretAimPos on the vehicles.
	Int AimTimer; //If the marine has been trying to aim and fire at the target for this long, then it's not working.
	
	//Shooting variables.
	Int AmmoCount; //How much ammo the marine has.
	Int BurstCounter; //Used by the burst fire tracking.
	Int BurstSize; //How many shots to fire.
	UInt8 NextFireDelay; //How long until the marine can shoot again, so that they don't shoot constantly. This can only be a ~7 second delay at most.
	Int AttackType; //How is the marine firing his gun ?
	Enum RifleFireModes
	{
		FIRE_BURST, //Fire a 3 round burst like the base M4 Carbine. Decently accurate.
		FIRE_SINGLE, //Fire a single accurate shot.
		FIRE_FULLAUTO, //Fire everything, pretty inaccurate, adds recoil, and slightly faster than normal fire (MAYDO ?).
	}
	Bool SittingDown; //Is the marine firing while kneeling or lying down ? Adds an overall accuracy buff.
	
	String User_Armor; //The name of the armor the marine should be equipped with upon spawning. Default is the vanilla green armor.
	
	States
	{
		//When the marine is looking around with this animation, he actually changes his sight angle.
		Spawn:
			MARI EEEEEEEE 3 //Look 80 degrees to your left.
			{
				Angle += 80;
				KAI_Look (LOF_NOJUMP,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV);
				Angle -= 80;
				If (Target) SetStateLabel ("See");
			}
			MARI FFFFFFFF 3 //Look 20 degrees to your right.
			{
				Angle -= 20;
				KAI_Look (LOF_NOJUMP,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV);
				Angle += 20;
				If (Target) SetStateLabel ("See");
			}
			MARI GGGGGGGG 3 //Look 80 degrees to your right.
			{
				Angle -= 80;
				KAI_Look (LOF_NOJUMP,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV);
				Angle += 80;
				If (Target) SetStateLabel ("See");
			}
			MARI HHHHHHHH 3 KAI_Look (0,0,MaxTargetRange,MARINE_HEARDIST,MARINE_FOV); //Just look straight.
			Loop;
		//Idle:
		//Idle.Stay: //Staying around idle. Basically like in the spawn state.
		//Idle.Stay.Alert: //Standing there, menacingly. Maybe use this for if the marine last saw an enemy a few seconds ago ?
		//Idle.Stay.Kneel: //Standing around while kneeling down, can randomly pick this one. TG5 needs to make sprites for me to be able to add it though.
		See:
			TNT1 A 0 SM_SetMarineState (MARINE_CHASING,0,True); //NOTE: Might cause problems if I implement the patrolling state ?
			MARF JJKKLLMM 3 SM_Chase (chaseflags:CHF_DONTIDLE);
			Goto See+1;
		//TODO: Add these to the attack states array.
		//MAYDO: Make a base Fire state, that just randomly decides a fire mode ?
		Fire: //Aim up.
			MARF JJJ 2; 
			MARF A 2 //Wait until you can actually aim properly at the enemy.
			{
				If (++AimTimer >= GameTicRate * 3) //https://www.youtube.com/watch?v=VX5gXHcbJAk
					Return FindState ("Fire.End",True);
				If (Target && CheckFOV(Target,160/2) && AimingAheadOfTarget())
					Return FindState ("Fire.Loop");
				Return State (Null);
			}
			Wait;
		Fire.Loop:
			MARF A 0 SM_SetMarineState (MARINE_FIRING,MARINE_IDLING|MARINE_THROWING|MARINE_WANDER); //Set marine actions.
			MARF A 3 //Delay
			{
				If (AttackType == FIRE_FULLAUTO)
					Tics = 2; //Fire faster in full auto.
				If (TRUE ==FALSE)//AmmoCount <= 0) //Out of ammo.
				{
					A_StartSound ("VRifle/EmptyGun",CHAN_WEAPON,attenuation:ATTN_STATIC); //Marine tried dry firing.
					Return FindState ("Fire.End");
				}
				
				Return State (Null);
			}
			MARF E 3 Light ("MarineMuzzleFlash") SM_FireBullet();
			MARF A 0
			{
				BurstCounter++;console.printf ("fired %d rounds",burstcounter);
				//Run line of fire checks.
				If (!SM_CheckLOF ((0,-6,42))) //The default parameters for this function are for marines firing bursts.
					Return FindState ("Fire.End",True);
				Return SM_CheckRefire (10,"Fire.End",MARINE_FIREFOV); //Since we are firing a short burst, be very likely to stop if anything is in the way.
			}
			MARF A 0 A_JumpIf (BurstCounter >= BurstSize,"Fire.End");
			Goto Fire.Loop;
		//Run some checks before you stop firing fully, like making sure you aren't out of ammo right after stopping.
		Fire.End:
			TNT1 A 0
			{
				SM_EndFiring();
				If (TRUE ==FALSE)//AmmoCount <= 0) //Out of ammo.
				{
					//Target is alive and in sight.
					If (!IsDead (Target) && CheckSight (Target,SF_IGNOREWATERBOUNDARY))
					{
						RetreatLoops = Random (6,12);
						Return FindState ("Retreat.Reload"); //Run either far enough or out of sight, to reload.
					}
					Else //Dead or out of sight, reload now.
						Return FindState ("Reload");
				}
				Return State (Null);
			}
			Goto See;
		Pain:
			MARA E 0 SM_SetMarineState (0,MARINE_IDLING|MARINE_THROWING|MARINE_WANDER); //Being hurt interrupts staying idle, wandering, and throwing grenades.
			MARA E Random (7,14) A_Pain();
			//MARA E 0 A_JumpIf ((MarineState & MARINE_RELOAD),"Reload"); //Go back to reloading if you were doing that already. IDEA: Or run away a bit ?
			//MARA E 0 A_JumpIf ((MarineState & MARINE_RETREAT),"Retreat"); //Or running.
			MARA E 0 A_JumpIf ((MarineState & MARINE_FIRING),"Fire.End"); //End shooting now that you flinched.
			Goto See;
	}
}