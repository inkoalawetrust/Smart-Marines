//TODO:
//Add a User_Ammo variable to the MG turret, which controls how much ammo the turret has when the player uses it, before it runs out.

//IDEA:
//Make the MG turret player morph take away the SM_50CalAmmo item entirely from the players' inventory when they get off?

//MAYDO:
//Maybe add a feature that limits the ammount of ammo a turret has to like 200-400 rounds for balancing purposes?
Class SM_MGMorphWeapon : Weapon
{
	Default
	{
		Weapon.BobRangeX 0.0;
		Weapon.BobRangeY 0.0;
		Weapon.Kickback 128;
		Weapon.SelectionOrder 1;
		Weapon.SlotPriority 50000;
		AttackSound "Turret/Fire";
		Decal "SM_MGChip";
		Weapon.AmmoType1 "SM_50CalAmmo";
		Weapon.AmmoUse1 1;
		+Weapon.DontBob;
		+Weapon.Ammo_Optional;
		+Weapon.BFG;
		+Weapon.CheatNotWeapon;
		+Weapon.NoDeathDeselect;
		+Weapon.NoDeathInput
		+Weapon.NoAutoaim;
	}
	
	Static Const String CheatMessages[] =
	{
		"Cheaters never prosper.",
		"You wouldn't download a machine gun.",
		"https://youtu.be/rGBEoFwlbwg",
		"doom smart marines machine gun console command free download 100% legit no malware"
	};
	
	Bool Legit; //If this wasn't on when the weapon was attached to the player, then a random cheat message is given.
	Bool LockedIn; //Zoomed in
	
	Override Void AttachToOwner (Actor Other)
	{
		If (!Legit) Console.Printf ("%s",CheatMessages[Random(0,3)]);
		Super.AttachToOwner (Other);
	}
	
	Action Class <Actor> Get50CalRound()
	{
		String I_NEED_MORE_BULLET = "MVP_50CalBullet";
		If (KAI_BaseProjectile.CheckActorExists('MVP_50CalBullet'))
			Return I_NEED_MORE_BULLET;
		Return "SM_50CalBullet";
	}
	
	Action Void ShouldZoomOverlay (Int Layer)
	{
		If (Invoker.LockedIn)
		{
			A_OverlayPivot (Layer,0.5,0.3);
			A_OverlayScale (Layer,2);
		}
	}
	
	Enum TurretLayers
	{
		PSP_GUNGLOW	= PSP_WEAPON+2,
		PSP_MUZZLE	= PSP_WEAPON-2,
		PSP_GLOW	= PSP_WEAPON-3,
	}
	
	States
	{
		
		Ready:
			MTUR H 1 A_WeaponReady();
			Loop;
		
		Select:
			TNT1 A 0 A_OverlayFlags (PSP_WEAPON,PSPF_INTERPOLATE|PSPF_PIVOTPERCENT,True);
			MTUR H 1 A_Raise(WEAPONTOP);
			Goto Ready;
		
		Deselect:
			Goto Ready;
		
		Fire:
			MTUR H 3
			{
				A_Overlay (PSP_GUNGLOW,"FireGlow");
				A_OverlayFlags (PSP_GUNGLOW,PSPF_INTERPOLATE,False);
				//A_OverlayOffset (PSP_GUNGLOW,1,flags:WOF_ADD);
				ShouldZoomOverlay(PSP_GUNGLOW);
				
				//HACK: I give up trying to make the muzzle flash work when zoomed in, all for something that just makes the zoom mode useless. No thanks.
				If (!Invoker.LockedIn) A_Overlay (PSP_MUZZLE,"MuzzleFlash");
				A_Overlay (PSP_GLOW,"LightGlow");
				ShouldZoomOverlay(PSP_GLOW);
				
				A_OverlayFlags (PSP_GLOW,PSPF_RENDERSTYLE|PSPF_PIVOTPERCENT,True);
				A_OverlayRenderStyle(PSP_GLOW, STYLE_Add);
				A_OverlayPivotAlign (PSP_GLOW,PSPA_CENTER,PSPA_CENTER);
				A_OverlayScale (PSP_GLOW,2,2);
				A_WeaponOffset(0, 2, WOF_ADD|WOF_INTERPOLATE);
				If (!Invoker.LockedIn) A_QuakeEx (0.2,0.2,0.2,4,0,32,"",rollintensity:0.25);
				Else A_QuakeEx (0.1,0.1,0.1,4,0,32,"",rollintensity:0.25/2);
				
				A_AttachLightDef ('MGFlash','SM_50CalFiringLight');
				A_StartSound ("Turret/Fire",CHAN_WEAPON,CHANF_OVERLAP);
				Double AimMul = Invoker.LockedIn ? 0.5 : 1;
				A_FireProjectile (Invoker.Get50CalRound(),FRandom (1.0,-1.0)*AimMul,spawnofs_xy:-4,pitch:FRandom(1.3,-1.3)*AimMul);
				Double CaseZ = 32;
				If (Player)
					CaseZ *= Player.CrouchFactor;
				Bool Trash; Actor Casing;
				[Trash,Casing] = A_SpawnItemEx ("SM_50CalCasing",10,-6,CaseZ,FRandom (0,-2.5),FRandom (-4,-8),FRandom(3,7));
				If (Casing)
					Casing.Vel += Vel;
			}
			MTUR G 3
			{
				A_WeaponOffset(0, 2, WOF_ADD|WOF_INTERPOLATE);
				A_StartSound ("Turret/Fire",CHAN_WEAPON,CHANF_OVERLAP);
				Double AimMul = Invoker.LockedIn ? 0.5 : 1;
				A_FireProjectile (Invoker.Get50CalRound(),FRandom (1.0,-1.0)*AimMul,spawnofs_xy:4,pitch:FRandom(1.3,-1.3)*AimMul);
				Double CaseZ = 32;
				If (Player)
					CaseZ *= Player.CrouchFactor;
				Bool Trash; Actor Casing;
				[Trash,Casing] = A_SpawnItemEx ("SM_50CalCasing",10,6,CaseZ,FRandom (0,2.5),FRandom (4,8),FRandom(3,7));
				If (Casing)
					Casing.Vel += Vel;
			}
			TNT1 A 0 A_RemoveLight ('MGFlash');
			TNT1 A 0 A_WeaponOffset(0, 32, WOF_INTERPOLATE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire: //TODO: Add zoom sound. Also give even bigger turn penalty when zoomed in for "Balance".
			TNT1 A 0
			{
				A_StartSound ("Turret/Zoom");
				If (!Invoker.LockedIn)
				{
					A_ZoomFactor (2);
					Invoker.LockedIn = True;
					Invoker.LookScale = 0.5;
					A_OverlayPivot (PSP_WEAPON,0.5,0.3);
					A_OverlayScale (PSP_WEAPON,2);
				}
				Else
				{
					A_ZoomFactor (1);
					Invoker.LockedIn = False;
					Invoker.LookScale = Invoker.Default.LookScale;
					A_OverlayPivot (PSP_WEAPON,0.5,0.3);
					A_OverlayScale (PSP_WEAPON,1);
				}
			}
			TNT1 A 0 A_Refire ();
			Goto Ready;
		AltHold: //Wait for the player to not be holding down the altfire.
			MTUR H 16 A_WeaponReady (WRF_NOSECONDARY); //Can still fire normally in the meantime though.
			TNT1 A 0 A_ClearRefire();
			Goto Ready;
				
		MuzzleFlash:
			MTUR I 3
			{
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				Double OverOfs = OverlayX(OverlayID())-12;
				If (Invoker.LockedIn)
				{
					//A_OverlayScale (OverlayID(),1.5,1.5,flags:WOF_INTERPOLATE|WOF_ADD);
					OverOfs = OverlayX(OverlayID())-32;
					OverOfs += 88;
					A_OverlayOffset (PSP_MUZZLE,wy:12,flags:WOF_KEEPX);
				}
				A_OverlayOffset (PSP_MUZZLE,OverOfs,flags:WOF_KEEPY);
				
				
				If (!Invoker.LockedIn) A_OverlayRotate(OverlayID(), Random(-40,40)*2);
				Float FlashScale = FRandom(0.7f,1.2f);
				A_OverlayScale (OverlayID(),FlashScale,FlashScale,flags:WOF_INTERPOLATE);
			}
			MTUR I 3
			{
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				Double OverOfs = OverlayX(OverlayID())+12;
				If (Invoker.LockedIn)
				{
					//A_OverlayScale (OverlayID(),2,2,flags:WOF_INTERPOLATE|WOF_ADD);
					OverOfs = OverlayX(OverlayID())+32;
					OverOfs -= 76;
					A_OverlayOffset (PSP_MUZZLE,wy:12,flags:WOF_KEEPX);
				}
				If (!Invoker.LockedIn) A_OverlayOffset (PSP_MUZZLE,OverOfs,flags:WOF_KEEPY);
				A_OverlayRotate(OverlayID(), FRandom(-40,40)*2);
				Float FlashScale = FRandom(0.7f,1.2f);
				A_OverlayScale (OverlayID(),FlashScale,FlashScale,flags:WOF_INTERPOLATE);
			}
			Stop;
		
		FireGlow:
			MTUR L 3 Bright
			{	
				A_OverlayFlags(OverlayID(), PSPF_RENDERSTYLE, True);
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				A_OverlayFlags(OverlayID(), PSPF_ALPHA, True);
			}
			MTUR J 3 Bright;
			Stop;
		
		LightGlow:
			MTUR K 6 Bright;
			Stop;
	}
}

Class SM_50CalAmmo : Ammo
{
	Default
	{
		Inventory.PickupMessage "Should you even be able to pick this up?";
		Inventory.Amount 100;
		Inventory.MaxAmount 800; //Default max ammo amount.
	}
}

Class SM_50CalBullet : KAI_BaseProjectile
{
	Default
	{
		Radius 4;
		Height 8;
		Speed 230;
		FastSpeed 250;
		XScale 0.2;
		YScale 0.166667; //0.2 / 1.2
		DamageFunction (Random (25,40));
		ProjectileKickback 32;
		RipperLevel 3;
		Obituary "%o was gunned down by a machine gun";
		Decal "50CalChip";
		DamageType "LargeRifleBullet";
		BounceSound "SFX/BulletRicochet";
		KAI_BaseProjectile.TrailSprite "SM_50CalTracer";
		KAI_BaseProjectile.InitialTrailsSkipped 4;
		KAI_BaseProjectile.MaxTrails 128;
		KAI_BaseProjectile.RipDepth 5;
		+Ripper;
		+KAI_BaseProjectile.RipOnce;
	}
	
	Override Int SpecialMissileHit (Actor Victim)
	{
		If (Super.SpecialMissileHit(Victim) == 1) Return 1;
		If (Victim.bSolid && !Victim.bShootable) Return 1; //Don't stop at decorations that normally block projectiles.
		
		//Always bounce off players with god mode. Or player pawns and monsters with Invulnerable or NoDamage.
		If ((HasGodMode(Victim) || IsIndestructible(Victim) && !IsInanimateObject(Victim)) && DeflectProjectile (Victim,0,FRandom(0.4,0.6),FRandom (1.,0.7),(10,-10),(10,-10),attenuation:0.75)) {bRipper = False; Return 1;}
		//Fairly likely to bounce off healthy enough actors that don't bleed (Which should suggest its' something inorganic like a robot or golem or something, where deflection would make sense).
		Else If (Victim.bNoBlood && !IsIndestructible (Victim) && Victim.SpawnHealth() >= 2000 && DeflectProjectile (Victim,192,FRandom(0.5,0.7),FRandom (1.,0.85),(6,-6),(6,-6),attenuation:0.75)) {bRipper = False; Return 1;}
		
		bExtremeDeath = (Victim.SpawnHealth() <= 200); //Obliterate any weak enemy.
		
		//Stop penetrating if the target has a lot of health.
		bRipper = (Victim.SpawnHealth() >= 500);
		Return -1;
	}
	
	States
	{
		Spawn:
			BUL1 A 0;
			BUL1 # 1 Light ("SM_50CalTracerLight")
			{
				Frame = UpdateProjectileElevation (2,2,0,1,1); //C, C, A, B, B
			}
			Loop;
		Death: //Bullet hit level geometry.
			TNT1 A 1
			{
				A_StopSound (CHAN_BODY);
				A_StartSound ("Turret/Impact");
			}
			Stop;
		XDeath: //Bullet hit a bleeding actor.
			TNT1 A 1; //Don't play the impact sound on bleeding actors.
			Stop;
		Crash: //Bullet hit a non bleeding actor.
			TNT1 A 1 A_StartSound ("Turret/Impact");
			Stop;
	}
}

Class SM_50CalTracer : KAI_Tracer
{
	Override Void SetProperties()
	{
		Super.SetProperties();
		DestroyIfNoOwner = True;
		DefaultSprite = TexMan.CheckForTexture("MTUR]0",TexMan.Type_Sprite);
	}
}