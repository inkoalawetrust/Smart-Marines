//Mixin classes that contain all the AI functions. And the event handler that allows marines to hear NPCs too.

Mixin Class MarineFunctions
{
	//=======================================
	//The sight and hearing related functions.
	//=======================================
	
	Void LookForGrenades() //An alias for the below code basically.
	{
		BlockThingsIterator FindBomb = BlockThingsIterator.Create (Self,256);
		
		While (FindBomb.Next())
		{
			If (FindBomb.Thing Is "SmartMarineGrenade")
			{
				A_Log ("Holy shit a grenade.");
				If (Target) {Target = ActualTarget;} //If the marine has at target, store it in another pointer.
				Target = FindBomb.Thing; //Set the found grenade as the target.
				SetStateLabel ("RunAway");
				Return;
			}
		}
	}
	
	Protected Void A_SMarineLook()
	{
		If (ListenForPlayers()) {SetStateLabel ("See");}
		If (ListenForEnemies()) {SetStateLabel ("See");}
		If (LookForEnemies (False) || LookForPlayers (False) || LookForPlayerAllies())
		{
			If (Target && IsVisible (Target,False) && IsHostile (Target))
			{
				SetStateLabel ("See");
			}
		}
		LookForGrenades();
	}
	//Players are the only thing in vanilla Doom emitting noise as monsters understand it.
	Bool ListenForPlayers (Double Distance = 1024)
	{
		If (!Target)
		{
			If (LastHeard && LastHeard.Health > 0 && IsHostile (LastHeard))
			{
				Target = LastHeard;
				Return True;
			}
		}
		Return False;
	}
	
	Bool ListenForEnemies (Double Distance = 1024)
	{
		Actor NPC;
		If (!Target)
		{
			BlockThingsIterator Listen = BlockThingsIterator.Create(Self,Distance);
			
			While (Listen.Next())
			{
				NPC = Listen.Thing;
				If (NPC && IsHostile(NPC) && NPC.Health > 0 && NPC.IsActorPlayingSound (CHAN_AUTO) && NPC.bIsMonster)
				{
					Target = NPC;
					Return True;
				}
			}
		}
		Return False;
	}
	
	Bool LookForPlayerAllies (Double Distance = 8192)
	{
		If (!Target)
		{
			BlockThingsIterator FindFriendlyNPC = BlockThingsIterator.Create (Self,Distance);
			
			While (FindFriendlyNPC.Next())
			{
				//The pointer is valid and you aren't the actor iterated.
				If (FindFriendlyNPC.Thing && FindFriendlyNPC.Thing != Self) {Continue;}
				//You aren't friendly to the player yourself, but the other actor is.
				If (!Self.bFriendly && FindFriendlyNPC.Thing.bFriendly) {Continue;}
				//The actor is a monster/NPC, and isn't dead.
				If (FindFriendlyNPC.Thing.bIsMonster && FindFriendlyNPC.Thing.Health >= 0) {Continue;}
				//You can actually see the other actor, and it is hostile to you.
				If (IsVisible (FindFriendlyNPC.Thing,False) && IsHostile (FindFriendlyNPC.Thing))
				{
					Target = FindFriendlyNPC.Thing;
					Return True;
				}
			}
		}
		Return False;
	}
	
	//=============================
	//The chasing related functions.
	//=============================
	
	Int ForgetTimer; //Keeps track of how long the target has been out of sight.
	
	Protected Void A_SMarineChase()
	{
		A_Chase (Null,Null); ///Just move, the rest should be handled by the below code.
		
		//Swimming behavior
		If (!User_NoSwim)
		{
			If (WaterLevel == 0) //If you are on land.
			{
				CreateWaterCheck(48); //Create a check for water.
				If (CheckForWater()) {A_Face (WaterChecker); SetStateLabel ("DiveIn"); Return;} //And dive in if it detects water in front of you.
			}
			Else {SetStateLabel ("Swimming"); Return;}
		}
		
		If (!RunningAway) //Run none of this if the marine is running away.
		{
			LookForGrenades();
			
			If (!User_Fearless)
			{
				//A_Log ("Running fear check.");
				//If the target is nearby, and hostile, has over 2500 health, or is big enough, or has any of the below flags, then get scared of them.
				//Or just get scared if your target is nocliping, because something is VERY wrong.
				If (Target && IsHostile (Target) && Distance3D (Target) <= 1024)
				{
					If (Target.Health >= 2500 || Target.Height >= 80 && Target.Radius >= 72 || Target.bReflective && Target.bAimReflect ||
					Target.bNoDamage || Target.bInvulnerable) {A_Log ("Spooky scary Cyberdemons."); bFrightened = True;}
				}
				Else {bFrightened = False;} //If they don't, e.g. you changed target, then stop being scared.
			}
			
			//If User_Persistent is off, there is a valid target, and it isn't visible or dead.
			If (!User_Persistent && Target && !IsVisible (Target,False) && Target.Health > 0)
			{
				ForgetTimer++; //Increment the timer.
				
				If (Target && Target.IsActorPlayingSound(CHAN_AUTO) && Distance3D (Target) <= 512)
				{ForgetTimer = 0;} //Reset the timer if you hear your target make a sound nearby.
				
				//console.printf("The forget timer is now %d", ForgetTimer);
				If (ForgetTimer >= User_AttentionSpan) //Check if it exceeds User_AttentionSpan.
				{
					ForgetTimer = 0;
					A_ClearTarget();
					SetStateLabel ("Wander");
					Return; //Stop the function.
				}
			}
			Else {ForgetTimer = 0;} //Reset the timer otherwise.
			
			//Attack decision code.
			If (Target && IsVisible (Target,False))
			{
				//A_Log ("I have a target.");
				
				//If the target is in melee range, do a melee attack.
				If (CheckMeleeRange() && !User_NoMelee)
				{
					//A_Log ("I'll smack them.");
					SetStateLabel ("RifleSmack");
					Return;
				}
				
				//Otherwise check if they are in range in general.
				If (CheckMissileRange())
				{
					If (DecideGrenadeAttack()) //Run the code to decide a melee attack.
					{
						SetStateLabel ("ThrowGrenade");
						Return;
					}
					//A_Log ("I'll shoot them.");
					SetStateLabel ("RifleBurst");
					Return;
				}
			}
		}
	}
		
	//============================
	//The attack related functions.
	//============================
	
	Protected Void A_SMarineShoot()
	{
		LookForGrenades(); //Check for nearby grenades first.
		A_CustomBulletAttack (2.5,2.6,1,Random(6,12),"SmartMarinePuff",8196+2,CBAF_NORANDOM|CBAF_AIMFACING,spawnheight:42,-6);
		A_StartSound ("Marine/Fire",CHAN_WEAPON);
		ShotsFired++;
		
		If (ShotsFired >= 5+1) {ShotsFired = 0; SetStateLabel ("ChangePosition"); Return;} //Move after shooting 5 shots.
		
		If (!User_NoReload)
		{
			MagazineRounds--;
			
			If (MagazineRounds <= 0 && !User_NoRetreat) {SetStateLabel ("Retreat"); Return;} //Retreat if NoRetreat is false.
			Else If (MagazineRounds <= 0 && User_NoRetreat) {SetStateLabel ("Reload"); Return;} //Reload while visible to the target otherwise.
		}
		
	}
	
	Protected Bool DecideGrenadeAttack()
	{
		If (Random (0,256) >= 48 && !User_NoGrenade) //Determine if a grenade should be thrown.
		{
			Int ThrowChance;
			ThrowChance = Random (0,256);
			If (Target && Target.Health >= 100) {ThrowChance += 20;}
			//console.printf("The throwing chance is now %d", ThrowChance);
			If (Target)
			{
				BlockThingsIterator CheckAroundTarget = BlockThingsIterator.Create (Target,192);
				Actor FoundActor;
				While (CheckAroundTarget.Next())
				{
					FoundActor = CheckAroundTarget.Thing;
					//console.printf("The throwing chance is now %d", ThrowChance);
					If (FoundActor && FoundActor.bIsMonster && IsHostile(FoundActor) && FoundActor.Health >= 20 && FoundActor != Self && FoundActor != Target)
					{ThrowChance += Random(10,20);}
				}
			}
			If (ThrowChance >= User_GrenadeThreshold && Random(0,256) >= 128)
			{
				Return True; //If the checks pass, return true.
			}
		}
		Return False;
	}
	
	Bool IsInState (StateLabel State = "Spawn")
	{
		If (InStateSequence(CurState,ResolveState (State))) {Return True;}
		Return False;
	}
}

/*This has the effect of having every monster be able to hear every other monsters' attack, instead of just the marines,
hearing the attacks of other hostile monsters, there just doesn't seem to be a way to do this without modifying all monsters.*/
/*Class SmartMarineHearingHandler : EventHandler
{
	Override Void WorldThingSpawned (WorldEvent E)
	{
		If (E.Thing.bMissile && E.Thing.Target || E.Thing Is "BulletPuff" && E.Thing.Target)
		{
			E.Thing.Target.A_AlertMonsters (1024,AMF_TARGETEMITTER);
		}
	}
}*?