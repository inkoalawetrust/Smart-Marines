//Mixin classes that contain all the AI functions that'll break later.

//Bugs I have to fix.

Mixin Class MarineFunctions
{
	//=======================================
	//The sight and hearing related functions.
	//=======================================
	
	Void LookForGrenades() //An alias for the below code basically.
	{
		If (CheckProximity ("SmartMarineGrenade",256,1)) {A_Log ("Holy shit a grenade.");SetStateLabel ("RunAway");}
	}
	
	Protected Void A_SMarineLook()
	{
		If (ListenForTargets()) {SetStateLabel ("See");}
		If (LookForEnemies (False) || LookForPlayers (False) || LookForPlayerAllies())
		{
			If (Target && IsVisible (Target,False) && IsHostile (Target))
			{
				SetStateLabel ("See");
			}
		}
		LookForGrenades();
	}
	
	Bool ListenForTargets (Double Distance = 2048)
	{
		If (!Target)
		{
			If (LastHeard && LastHeard.Health > 0 && IsHostile (LastHeard))
			{
				Target = LastHeard;
				Return True;
			}
		}
		Return False;
	}
	
	Bool LookForPlayerAllies (Double Distance = 8192)
	{
		If (!Target)
		{
			BlockThingsIterator FindFriendlyNPC = BlockThingsIterator.Create (Self,Distance);
			
			While (FindFriendlyNPC.Next())
			{
				//The pointer is valid and you aren't the actor iterated.
				If (FindFriendlyNPC.Thing && FindFriendlyNPC.Thing != Self) {Continue;}
				//You aren't friendly to the player yourself, but the other actor is.
				If (!Self.bFriendly && FindFriendlyNPC.Thing.bFriendly) {Continue;}
				//The actor is a monster/NPC, and isn't dead.
				If (FindFriendlyNPC.Thing.bIsMonster && FindFriendlyNPC.Thing.Health >= 0) {Continue;}
				//You can actually see the other actor, and it is hostile to you.
				If (IsVisible (FindFriendlyNPC.Thing,False) && IsHostile (FindFriendlyNPC.Thing))
				{
					Target = FindFriendlyNPC.Thing;
					Return True;
				}
			}
		}
		Return False;
	}
	
	//=============================
	//The chasing related functions.
	//=============================
	
	Int ForgetTimer; //Keeps track of how long the target has been out of sight.
	
	Protected Void A_SMarineChase()
	{
		A_Chase (Null,Null); ///Just move, the rest should be handled by the below code.
		
		LookForGrenades();
				
		//If User_Persistent is off, there is a valid target, and it isn't visible or dead.
		If (!User_Persistent && Target && !IsVisible (Target,False) && Target.Health > 0)
		{
			ForgetTimer++; //Increment the timer.
			
			If (Target && Target.IsActorPlayingSound(CHAN_AUTO) && Distance3D (Target) <= 512)
			{ForgetTimer = 0;} //Reset the timer if you hear your target make a sound nearby.
			
			console.printf("The forget timer is now %d", ForgetTimer);
			If (ForgetTimer >= User_AttentionSpan) //Check if it exceeds User_AttentionSpan.
			{
				ForgetTimer = 0;
				A_ClearTarget();
				SetStateLabel ("Wander");
				Return; //Stop the function.
			}
		}
		Else {ForgetTimer = 0;} //Reset the timer otherwise.
		
		//Attack decision code.
		If (Target && IsVisible (Target,False))
		{
			A_Log ("I have a target.");
			
			//If the target is in melee range, do a melee attack.
			If (CheckMeleeRange() && !User_NoMelee)
			{
				A_Log ("I'll smack them.");
				SetStateLabel ("RifleSmack");
				Return;
			}
			
			//Otherwise check if they are in range in general.
			If (CheckMissileRange())
			{
				If (DecideGrenadeAttack()) //Run the code to decide a melee attack.
				{
					SetStateLabel ("ThrowGrenade");
					Return;
				}
				A_Log ("I'll shoot them.");
				SetStateLabel ("RifleBurst");
				Return;
			}
		}
	}
	
	//============================
	//The attack related functions.
	//============================
	
	Protected Void A_SMarineShoot()
	{
		LookForGrenades(); //Check for nearby grenades first.
		A_CustomBulletAttack (2.5,2.6,1,Random(6,12),"SmartMarinePuff",8196+2,CBAF_NORANDOM|CBAF_AIMFACING,spawnheight:42,-6);
		A_StartSound ("Marine/Fire",CHAN_WEAPON);
		ShotsFired++;
		
		If (ShotsFired >= 5+1) {ShotsFired = 0; SetStateLabel ("ChangePosition"); Return;} //Move after shooting 5 shots.
		
		If (!User_NoReload)
		{
			MagazineRounds--;
			
			If (MagazineRounds <= 0 && !User_NoRetreat) {SetStateLabel ("Retreat"); Return;} //Retreat if NoRetreat is false.
			Else If (MagazineRounds <= 0 && User_NoRetreat) {SetStateLabel ("Reload"); Return;} //Reload while visible to the target otherwise.
		}
		
	}
	
	Protected Bool DecideGrenadeAttack()
	{
		If (Random (0,256) >= 48 && !User_NoGrenade) //Determine if a grenade should be thrown.
		{
			Int ThrowChance;
			ThrowChance = Random (0,256);
			If (Target && Target.Health >= 100) {ThrowChance += 20;}
			console.printf("The throwing chance is now %d", ThrowChance);
			If (Target)
			{
				BlockThingsIterator CheckAroundTarget = BlockThingsIterator.Create (Target,192);
				Actor FoundActor;
				While (CheckAroundTarget.Next())
				{
					FoundActor = CheckAroundTarget.Thing;
					console.printf("The throwing chance is now %d", ThrowChance);
					If (FoundActor && FoundActor.bIsMonster && IsHostile(FoundActor) && FoundActor.Health >= 20 && FoundActor != Self && FoundActor != Target)
					{ThrowChance += Random(10,20);}
				}
			}
			If (ThrowChance >= User_GrenadeThreshold && Random(0,256) >= 128)
			{
				Return True; //If the checks pass, return true.
			}
		}
		Return False;
	}
}