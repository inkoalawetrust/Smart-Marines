Version "4.3.3"

#Include "VanillaRifle.zsc" //The rifle the marine may drop when killed.
#Include "MarineFunctions.zsc" //A mixin container for all the marines' custom functions.

#Include "Marine_Deaths.zsc" //Holds all the death and raise states of the marine.
#Include "Marine_OtherActors.zsc" //Other actors related to the marine. Like the grenades and empty magazines.
#Include "Marine_Turret.zsc" //Handles the code for the marines' turret, and their turret states.
#Include "Marine_UserVariables.zsc" //Has the code related to the marines' user variables.

//To do:
/*HATE. LET ME TELL YOU HOW MUCH I'VE COME TO HATE YOU SINCE I BEGAN TO WORK ON YOU.
THERE ARE 86,000,000,000 NEURONS THAT MY BRAIN IS COMPOSED OF.
IF THE WORD HATE WAS ENGRAVED ON EACH NANOANGSTROM OF THOSE TENS OF BILLIONS OF NEURONS IT WOULD NOT EQUAL ONE ONE-BILLIONTH OF THE HATE I FEEL FOR
MARINES AT THIS MICRO-INSTANT FOR YOU. HATE. HATE.*/
/*When the new GZDoom version comes out, begin using CHF_DONTIDLE, and also use my DONTFOLLOWPLAYERS flag, to add an additional use mode for friendly marines,
that makes them follow you. While the wandering mode makes them actually wander around, instead of following you.*/
//Maybe add a secondary melee attack to the rifle weapon, like what the marines have. I'll need first person sprites of the rifle being swung though.

Class SmartMarine : Actor
{
	Default
	{
		//$Title AI Marine
		//$Category Marines
		//$Sprite MARIC1
		Health 120;
		GibHealth 20;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.98;
		Mass 100;
		Speed 10;
		FastSpeed 14;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 20;
		MaxDropOffHeight 48;
		MaxTargetRange 8192;
		MinMissileChance 100;
		Tag "Marine NPC";
		Species "SmartMarine";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine";
		HitObituary "%o got %p head smashed in by a marines' rifle";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		PainSound "Marine/Pain";
		DeathSound "Marine/Death";
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
		+AvoidMelee;
		+AvoidHazards; //This ONLY works for crushing ceilings and NOTHING ELSE. So it's largely useless but I'm still adding it.
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen() || Health <= 0) {Return;} //Don't run the below code if frozen in time or dead.
		
		If (GrenadeDelay > 0) GrenadeDelay--;
		
		HandleRandomPersonalityMidGame(); //Allows switching on User_RandomPersonality mid-game, to randomize the marine in-game... if you want that for some reason.
		If (!bFriendly)
		{
			Species = "HostileSmartMarine";
		}
		Else
		{
			Species = "SmartMarine";
		}		
	}
	
	Override Bool Used (Actor User)
	{
		Super.Used (User);
		
		If (User_DisobeyCommands || Goal) Return False; //Ignore all this when patrolling. Or if it is disabled.
		
		If (bFriendly) //This should only work if the marine is friendly towards players.
		{
			If (SM_IsInState ("Spawn") && !Target && IsFriend (User)) //If you are in the spawn state, have no target, and your user was friendly.
			{
				Spawn ("SmartMarineWanderingMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_StartSound ("Misc/Chat",CHAN_VOICE,CHANF_OVERLAP,0.25,ATTN_STATIC);
				SetStateLabel ("Idle"); //Then go to the Idle state.
				Return True;
			}
			Else If (SM_IsInState ("Idle") || SM_IsInState ("StandStill") || SM_IsInState ("See") && !Target && IsFriend (User)) //Ditto but with the Idle, StandStill, or See states instead.
			{
				Spawn ("SmartMarineStandingMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_StartSound ("Misc/Chat",CHAN_VOICE,CHANF_OVERLAP,0.25,ATTN_STATIC);
				TimeSearching = 0; //Reset the time the marine has spent searching for targets. In case the marine was used while in the See state.
				SetStateLabel ("Spawn"); //Go back to the spawn state, to stop wandering.
				Return True;
			}
			Else If (OnTurret && IsFriend (User) && !Target) //If you are on a turret, your user was friendly, and you have no target currently.
			{
				Spawn ("SmartMarineTurretMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_StartSound ("Misc/Chat",CHAN_VOICE,CHANF_OVERLAP,0.25,ATTN_STATIC);
				LeaveTurret();
				SetStateLabel ("Idle");
				Return True;
			}
		}
		Else If (!bFriendly && IsHostile (User) && (SM_IsInState ("Spawn") || SM_IsInState ("Idle") || SM_IsInState ("StandStill"))) //If you are hostile and a player tried using you while in your Spawn, Idle, or StandStill state.
		{
			Target = User;
			SM_AlertNearbyMarines (User_AlertRange,True); //And alert all marines around you of the player.
			SetStateLabel ("See");
			Return True;
		}
		
		Return False;
	}
	
	Override Bool OkayToSwitchTarget(Actor Other)
	{
		If (Other.bIsMonster && IsHostile(Other) && Other.Health > 0) {SM_AlertNearbyMarines(User_AlertRange,True);}
		Return Super.OkayToSwitchTarget(Other);
	}
	
	Mixin MarineFunctions;
	Actor OriginalTarget; //Temporarily stores the marines' target while running from a grenade.
	Int TimeSearching; //Once it increments over a certain value, the marine will stop chasing and go back to wandering/Idle.
	Int BulletSpreadXY, BulletSpreadZ; //Used to generate the spread for the bullets, before the hitscan is fired.
	Int AmmoUsed; //Keeps track amount of bullets that have been fired by the marine, before needing to reload.
	Int EscapeAttempts; //How many times the marine has attempted to run out of sight to reload.
	Int GrenadeDelay; //Marines set this timer on each other after throwing grenades, to not all spam grenades at once when in groups.
	Bool RemovedOldMag; //Keeps track of whether or not the marine removed their previous magazine during reloading.
	Bool ReactionTimeFixed; //When the marines' reaction time is fixed, after being interrupted on a delayed patrol point, this is used to only apply the fix once. To not further break the reaction time.
	Bool QuickReload; //Used to make the marines reload in the open. If they have no enemies around, or to quickly reload if they have Don't Chase Targets on, and are patrolling.
	Bool Maneuvering; //Used when the marine goes to the ChangePosition state while firing.
	Bool WasChaseGoalOn; //Used in the RunAway state, to keep track of whether or not the marine was following a patrol point with ChaseGoal on before running away,
	
	States
	{
		Spawn:
			MARI AABBAACCDDCC Random (12,17)
			{
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}

				SM_LookForTarget();
				SM_ListenForEnemyAlerts(User_EnemyAlertHearingRange);
				Return State (Null);
			}
			Loop;
		See:
			MAR2 AAAABBBBCCCCDDDD 2
			{
				If((Target && Target is 'PatrolPoint') && ((Goal && Target != Goal) || !Goal)) Target = Null;
				
				if(!bFriendly)
				{
					SM_UpdateTarget();
				}
				
				//If your goal is a marker to a turret for you to enter.
				//======================================================
				If (Goal && Goal.GetClassName() == "SM_TurretLocationMarker")
				{
					If (!bFrightened) MinMissileChance = 230; Else MinMissileChance = 500; //If your target is really powerful, then just run to the turret ASAP.
					//Stop going to the turret if someone else got to the same turret already.
					If (SmartMarineMGTurret(Goal.Master).Occupied)
					{
						GoingToTurret = False;
						Goal.Destroy();
					}
					If (Goal && Distance3D (Goal) <= 64) //And you are close enough to "use" the turret the goal is at.
					{
						Turret = Goal.Master; //The goals' master should be the turret, otherwise the goal would've been removed.
						Turret.A_ChangeLinkFlags (True,True); //Then remove the turret from the blockmap and sector.
						SmartMarineMGTurret(Turret).Occupied = True; //Mark the turret as being used.
						
						TimeSearching = 0; //Just in case, as the TurretSee state uses this too.
						A_Stop(); //No more momentum.
						Speed = Default.Speed; //Reset your speed to normal.
						ReactionTime /= 4;
						MinMissileChance = Default.MinMissileChance; //Go back to being less anemic about attacking.
						GoingToTurret = False; //Clarify that you are now on the turret...
						OnTurret = True; //...and not going towards it still.
						JustGotOnTurret = True;
						bNoPain = True; //Turn the flag on to not break the turret states by entering the pain state.
						bDontThrust = True;
						bChaseGoal = False;
						Angle = Turret.Angle; //Face the angle the turret is at.
						Warp (Turret,flags:WARPF_NOCHECKPOSITION); //Go to the turrets' position.
						Goal.Destroy(); //Remove the goal.
						A_StartSound ("Turret/Ready",CHAN_AUTO);
						Return ResolveState ("TurretSee");
					}
				}
				//======================================================
				//Stuff added to keep the marines working with ZDoom patrol points and routes.
				If (Target && Target.Health <= 0) Target = Null; //Remove dead targets.
								
				If (Target && Goal && Target == Goal) //If moving towards a patrol point.
				{
					ReactionTimeFixed = False;
					If (!(Goal.GetClassName() == "SM_TurretLocationMarker"))Speed = Default.Speed * 0.75; //Don't move so fast when patrolling.
					Else Speed = Default.Speed * 1.5; //But move even faster if running towards a turret.
					Sprite = GetSpriteIndex ('PLAY'); //And change the to the normal player walking sprites, instead of the ADS sprites.
				}
				Else //If your target is no longer a patrol point.
				{
					Speed = Default.Speed;
					Sprite = GetSpriteIndex ('MAR2');
				}
				
				If (Target && Goal && Target != Goal && !ReactionTimeFixed) //If you were patrolling, but got interrupted by an enemy.
				{
					ReactionTime = Default.ReactionTime; //Then reset your reaction time to normal, in case you were on a delayed patrol point before.
					ReactionTimeFixed = True;
				}
				//============================================================================
				
				If (!Target || Target && (!CheckSight (Target,SF_SEEPASTSHOOTABLELINES|SF_IGNOREWATERBOUNDARY ) || Target.Health <= 0)) //If there is no target, or the target is not visible or alive.
				{
					TimeSearching++; //Increment the amount of time you've been looking for the target.
					//Only run this code if the feature isn't disabled, or if the marine isn't patrolling..
					If ((User_SearchTime != -1 && !(Target && Goal && Target == Goal)) && TimeSearching >= User_SearchTime)
					{
						TimeSearching = 0; //Reset the timer.
						A_ClearTarget(); //I forgor 💀
						Return ResolveState ("Idle"); //And go back to wandering.
					}
				}
				Else {TimeSearching = 0;} //If the target is visible, then reset the timer again.
				
				SM_ListenForEnemyAlerts(User_EnemyAlertHearingRange); //Listen for enemy marines that alerted their buddies.
				
				//Have the marine run away from grenades about to explode.
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}
				
				If (!Target && AmmoUsed >= 10 && TimeSearching >= 50*FRandom(1.1f,1.4f)) //Check if your magazine is half empty. And you haven't seen an enemy in a while.
				{
					QuickReload = True;
					Return ResolveState ("Reload");
				}
				
				If (CountInv ("PowerStrength") > 0) bAvoidMelee = False; Else bAvoidMelee = True; //Don't avoid melee combat if you have a berserk pack.
				
				//These if statement switches prevent hostile marines from instantly going back to Idle when they have no target. And also makes them move to patrol points.
				If (Target && !bFriendly && Target.bShootable && Target.Health > 0 || Target && Goal && Target == Goal)
				{
					SM_ShouldBeScared();
					A_Chase ("RifleSmack","DecideAttack");
				}
				Else If (!bFriendly && User_SearchTime != -1)
				{
					A_Wander();
				}
				Else
				{
					SM_ShouldBeScared();
					A_Chase ("RifleSmack","DecideAttack");
				}
				
				Return State (Null);
			}
			Loop;
		Idle:
			PLAY AABBCCDD 3
			{
				If (Goal) //If you have a goal, and are therefore probably here because you reached a patrol point with a delay.
				{
					Sprite = GetSpriteIndex ('MARI'); //Change sprites to the spawn state ones.
					Tics = Random (16,22); //And change the state durations to something similar to the ones in Spawn.
				}
				Else
				{
					Sprite = GetSpriteIndex ('PLAY');
					Tics = 3;
				}
				
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}
				
				If (User_SearchTime == -1) //Since the marines go back here immediately, if SearchTime is -1. This early reloading behavior has to be handled here.
				{
					TimeSearching++;
					If (!Target && AmmoUsed >= 10 && TimeSearching >= 50*FRandom(1.1f,1.4f)) //Check if your magazine is half empty. And you haven't seen an enemy in a while.
					{
						QuickReload = True;
						Return ResolveState ("Reload");
					}
				}
				
				A_Wander();
				SM_UpdateTarget();
				SM_LookForTarget();
				SM_ListenForEnemyAlerts(User_EnemyAlertHearingRange);
				
				Return State (Null);
			}
			PLAY A 0
			{
				If (!Goal && Random[pr_cajump](0,256) < 12) //Uses the same RNG as A_Jump's random jump chance, but also only jumps if the marine has no goal.
				{
					Return ResolveState ("StandStill");
				}
				Return State (Null);
			}
			Loop;
		AlertOtherMarines: //Alerts other marines of the target that the marine just acquired after calling A_LookEx.
			TNT1 A 0 SM_AlertNearbyMarines(User_AlertRange);
			TNT1 A 0 A_JumpIf (OnTurret,"TurretSee");
			Goto See;
		StandStill:
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MARA A 10
			{
				If (Random (0,256) >= 220) //Random chance to turn around a bit.
				{
					Angle += RandomPick (20,30,45,-45,-30,-20);
				}
				SM_LookForTarget();
				SM_ListenForEnemyAlerts(User_EnemyAlertHearingRange);
			}
			MARA A 0 A_Jump (24,"Idle");
			Loop;
		ChangePosition: //The marine doesn't check for grenades while here, so there is SOME time window where a marine can be harmed by one.
			MAR2 A 0 A_SetAngle (Angle+Random (-60,60));
			MAR2 AABBCCDD 3 A_Wander (CHF_NORANDOMTURN);
			MAR2 A 0 A_JumpIf (Maneuvering,2); //If you change position while shooting.
			MAR2 A 0 A_Jump (245,"See"); //High chance to only move once.
			Goto ChangePosition+1;
			TNT1 A 0 {Maneuvering = False;}
			TNT1 A 0
			{
				If (CheckMeleeRange() && Random[pr_cajump](0,255) < User_MeleeChance) Return ResolveState ("RifleSmack");
				If (Random[pr_cajump](0,255) < 32) Return ResolveState ("DecideAttack");
				Return State (Null);
			}
			Goto RifleBurst;
		RunForReload:
			TNT1 A 0 A_SetSpeed (Default.Speed*1.5);
			PLAY AABBCCDD 2
			{
				//Don't try to run away if you have a goal, and are supposed to chase goals instead of targets.
				If (User_RetreatAttempts == -1 || bChaseGoal && Goal)
				{
					Speed = Default.Speed;
					QuickReload = True;
					Return ResolveState ("Reload");
				}
				bFrightened = True; bNoPain = True;
				A_Chase (Null,Null); //Just run away from your target.
				bNoPain = False; bFrightened = False;
				Return State (Null);
			}
			PLAY A 0
			{
				EscapeAttempts++;
				If (EscapeAttempts >= User_RetreatAttempts || Target && (!IsVisible (Target,True) || Target.Health <= 0))
				{
					EscapeAttempts = 0;
					Speed = Default.Speed;
					Return ResolveState ("Reload");
				}
				Return State (Null);
			}
			Loop;
		RunAway: //Makes the marine run away from any grenades about to explode, this state must NEVER be broken.
			TNT1 A 0 //Stop the state from being interrupted, and make the marine quickly run away from the grenade.
			{
				bNoPain = True;
				bFrightened = True;
				WasChaseGoalOn = bChaseGoal;
				bChaseGoal = False;
				Speed = Default.Speed*1.75;
			}
			PLAY AABBCCDD 2 A_Chase (Null,Null);
			TNT1 A 0
			{
				If (OriginalTarget && OriginalTarget.Health > 0)
				{Target = OriginalTarget;} //If the marine had a target prior to running from a grenade, and it's still alive, then set it back.
				Else If (Goal && !OriginalTarget) {Target = Goal;} //If the marine was patrolling on a delayed patrol point before having to run from a grenade. Then this make them resume patrolling, by going to the next patrol point, if any.
				Else {Target = Null;} //Otherwise just remove the grenade from the target field.
				bNoPain = False;
				bFrightened = False;
				bChaseGoal = WasChaseGoalOn;
				WasChaseGoalOn = False;
				Speed = Default.Speed;
			}
			Goto See; //Go back to the see state.
		DecideAttack: //Decide if you should use a turret, throw a grenade, or just shoot.
			TNT1 A 0 SM_TurretUseDecision();
			TNT1 A 0 A_JumpIf (GrenadeAttackDecision(),"ThrowGrenade"); //The code for GrenadeAttackDecision is in MarineFunctions.zsc.
			Goto RifleBurst;
		RifleSmack:
			MARA A 3 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MARM A 3;
			TNT1 A 0 A_JumpIf (CountInv("PowerStrength") > 0,3);
			MARM B 8 A_CustomMeleeAttack (Random(4,8),"Marine/Melee","Marine/MeleeMiss",'Melee',False); //Blunt force attack, so no blood.
			MARM A 0 A_Jump (User_MeleeChance,"ChangePosition"); //If you are in melee range of your enemy, you are probably fucked.
			Goto See;
			
			MARM B 6 A_CustomMeleeAttack (Random(16,32),"Marine/PowerMelee","Marine/MeleeMiss",'Melee'); //Powerful blunt force attack, so YES blood.
			MARM A 0 A_Jump (User_MeleeChance/2,"ChangePosition"); //If you are in melee range of your enemy with a berserk pack, you are probably not THAT fucked.
			Goto See;
		RifleBurst:
			MAR2 A 0 A_JumpIf (AmmoUsed > 19,"RunForReload"); //Run out of sight of the target to reload.
			MAR2 A 1;
			MAR2 A 0 //The bullet spread is determined before the shot, so that it can be checked by SM_CantHitTarget(), so the marines won't even shoot their allies by accident.
			{
				BulletSpreadXY += 2.2 * Random2[cwbullet]() / 255.;
				BulletSpreadZ += 2.3 * Random2[cwbullet]() / 255.;
			}
			MAR2 A 0 A_JumpIf (SM_CantHitTarget(),"ChangePosition"); //Check if any hitscan blocking actors or lines, or allies. Are in front of the line of fire.
			MARR A 4 Light ("MarineMuzzleFlash")
			{
				A_CustomBulletAttack (BulletSpreadXY,BulletSpreadZ,1,Random(6,10),"SmartMarinePuff",8196+2,CBAF_NORANDOM|CBAF_AIMFACING,spawnheight:42,-6);
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				If (!User_NoReload) AmmoUsed++;
			}
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MAR2 A 1 A_MonsterRefire (96,"See");
			MAR2 A 0 //Small chance to change position instead of just shooting in place.
			{
				If (Random[pr_cajump](0,255) < 24)
				{
					Maneuvering = True;
					Return ResolveState ("ChangePosition");
				}
				Return State (Null);
			}
			Loop;
		ThrowGrenade: //https://www.youtube.com/watch?v=BJrxKiW5f-4
			MARG AA 6 A_JumpIf (SM_CantHitTarget(True),"ChangePosition");
			MARG B 6
			{
				AnnounceGrenadeThrow();
				A_StartSound ("Marine/Throw",CHAN_VOICE,attenuation:0.8); //Umf
				FireGrenade (Target,"SM_Grenade",55,1.1,1024);
			}
			MARG B 4;
			Goto See;
		Reload:
			TNT1 A 0 A_JumpIf (QuickReload,9);
			PLAY AABBCCDD 2 //Run away a from your target for a bit longer after they are out of sight.
			{
				bFrightened = True;
				bNoPain = True;
				A_Chase (Null,Null); //Just run away from your target.
				bNoPain = False;
				bFrightened = False;
			}
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			TNT1 A 0 A_JumpIf (RemovedOldMag,6); //Makes the marine not spawn duplicate mags if interrupted before by being hurt or running from a grenade.
			TNT1 A 0 {bNoPain = True; QuickReload = False;}
			MARL ABC 6;
			MARL D 4 {A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1); RemovedOldMag = True;}
			MARL C 6;
			MARL B 6
			{
				A_StartSound ("Marine/Reload",CHAN_WEAPON);
				AmmoUsed = 0;
			}
			MARL A 4 {RemovedOldMag = False; bNoPain = False;}
			Goto See;	
		Pain:
			TNT1 A 0 {Maneuvering = False;}
			TNT1 A 0 A_JumpIf (OnTurret,"TurretSee"); //Just in case the NoPain flag somehow fails, while the marine is still on a turret.
			TNT1 A 0 A_SetSpeed (Default.Speed); //In case you were hurt during RunForReload.
			PLAY G 10 A_Pain();
			Goto See;
	}
}