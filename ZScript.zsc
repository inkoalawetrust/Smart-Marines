Version "4.7"

#Include "VanillaRifle.zsc" //The rifle the marine may drop when killed by an enemy.
#Include "MarineFunctions.zsc" //A mixin container for all the marines' custom functions.

#Include "Marine_Deaths.zsc" //Holds all the death and raise states of the marine.
#Include "Marine_OtherActors.zsc" //Other actors related to the marine. Like the grenades and empty magazines.

//To do:
/*HATE. LET ME TELL YOU HOW MUCH I'VE COME TO HATE YOU SINCE I BEGAN TO WORK ON YOU.
THERE ARE 86,000,000,000 NEURONS THAT MY BRAIN IS COMPOSED OF.
IF THE WORD HATE WAS ENGRAVED ON EACH NANOANGSTROM OF THOSE TENS OF BILLIONS OF NEURONS IT WOULD NOT EQUAL ONE ONE-BILLIONTH OF THE HATE I FEEL FOR
MARINES AT THIS MICRO-INSTANT FOR YOU. HATE. HATE.*/
//Maybe try adding some slight variation to the distance they run out to when their target is a powerful enemy ? Along with making the distance customizable
//Perhaps make them able to use berserk packs, to make their rifle swings more devastating. And by extension make them much more likely to use them when cornered.
//On the subject of making them use items, try figuring out a way to give Stimpacks and Medikits to them, that doesn't require modding the rest of the game.
//Add a function that allows hostile marines to see and attack friendly NPCs, instead of waiting to be attacked by them.

//To do stuff related to user variables:
//Have their chance of throwing a grenade controllable by a user variable, a value of 0 makes them ALWAYS throw grenades. And a chance of 256 means no grenades.
//Expose the amount of time they spend trying to find their target to a user variable, a value of 0 will mean that the marine doesn't give up pursuit.
//Add a user variable that makes marines not bother getting out of sight from their target, before reloading.
//Make the range marines keep from powerful enemies customizable, on top of adding some randomization to the distance. And if the distance is set to 0, they won't be afraid of powerful enemies.
//Make the chance for marines to stay in melee customizable as well, with 0 meaning they always avoid melee.
//Add a variable to make marines never need to reload.
//Reimplement the ability to color them using the User_Color variable.
//Expose the distance in which marines alert other marines customizable, with a distance of 0 meaning that they won't alert other marines friendly to them at all.
//Also add a variable that randomizes the marines "personality", like the predisposition towards throwing grenades. But not variables like User_NoReload.

Class SmartMarine : Actor //Good joke, me, "smart".
{
	Default
	{
		//$Title AI Marine
		//$Category Marines
		//$Sprite MARIC1
		Health 120;
		GibHealth 20;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.98;
		Mass 100;
		Speed 16;
		FastSpeed 24;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 20;
		MaxDropOffHeight 48;
		MaxTargetRange 8192;
		MinMissileChance 100;
		Tag "Marine NPC";
		Species "SmartMarine";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine";
		HitObituary "%o got %p head smashed in by a marines' rifle";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		DropItem "VanillaRifle", 48;
		DamageFactor "MarineHMG", 2.0;
		PainSound "Marine/pain";
		DeathSound "Marine/Death";
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
		+AvoidMelee;
		+AvoidHazards; //This ONLY works for crushing ceilings and NOTHING ELSE. So it's largely useless but I'm still adding it.
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen() || Health <= 0) {Return;} //Don't run the below code if frozen in time or dead.
				
		If (!bFriendly)
		{
			Species = "HostileSmartMarine";
		}
		Else
		{
			Species = "SmartMarine";
		}		
	}
	
	Override Bool Used (Actor User)
	{
		Super.Used (User);
		
		If (bFriendly) //This should only work if the marine is friendly towards players.
		{
			If (SM_IsInState ("Spawn") && !Target && IsFriend (User)) //If you are in the spawn state, have no target, and your user was friendly.
			{
				Spawn ("SmartMarineWanderingMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_StartSound ("Misc/Chat",CHAN_VOICE,CHANF_OVERLAP,0.25,ATTN_STATIC);
				A_Log ("I'm gonna start Wandering.");
				SetStateLabel ("Idle"); //Then go to the Idle state.
				Return True;
			}
			Else If (SM_IsInState ("Idle") || SM_IsInState ("StandStill") || SM_IsInState ("See") && !Target && IsFriend (User)) //Ditto but with the Idle, StandStill, or See states instead.
			{
				Spawn ("SmartMarineStandingMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_StartSound ("Misc/Chat",CHAN_VOICE,CHANF_OVERLAP,0.25,ATTN_STATIC);
				A_Log ("Keeping position.");
				TimeSearching = 0; //Reset the time the marine has spent searching for targets. In case the marine was used while in the See state.
				SetStateLabel ("Spawn"); //Go back to the spawn state, to stop wandering.
				Return True;
			}
		}
		Else If (!bFriendly && !IsFriend (User) && (SM_IsInState ("Spawn") || SM_IsInState ("Idle") || SM_IsInState ("StandStill"))) //If you are hostile and a player tried using you while in your Spawn, Idle, or StandStill state.
		{
			A_Log ("Really dude ?");
			Target = User;
			SM_AlertNearbyMarines (SkipCheck:True); //And alert all marines around you of the player.
			SetStateLabel ("See");
			Return True;
		}
		
		Return False;
	}
	
	Mixin MarineFunctions;
	Actor OriginalTarget; //Temporarily stores the marines' target while running from a grenade.
	Int TimeSearching; //Once it increments over a certain value, the marine will stop chasing and go back to wandering/Idle.
	Int AmmoUsed; //Keeps track amount of bullets that have been fired by the marine, before needing to reload.
	Int EscapeAttempts; //How many times the marine has attempted to run out of sight to reload.
	
	States
	{
		Spawn:
			MARI AABBAACCDDCC Random (12,17)
			{
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}

				SM_LookForTarget();
				Return State (Null);
			}
			Loop;
		See:
			MAR2 AABBCCDD 4
			{
				if(!bFriendly)
				{
					SM_UpdateTarget();
				}

				//If (LastHeard) {console.printf ("I last heard a %s",LastHeard.GetClassName());}
				If (!Target || Target && (!CheckSight (Target,SF_SEEPASTSHOOTABLELINES|SF_IGNOREWATERBOUNDARY ) || Target.Health <= 0)) //If there is no target, or the target is not visible or alive.
				{
					TimeSearching++; //Increment the amount of time you've been looking for the target.
					console.printf ("I've been looking for %d",TimeSearching);
					If (TimeSearching >= 100) //If the timer is over this placeholder value.
					{
						A_Log ("I give up.");
						TimeSearching = 0; //Reset the timer.
						A_ClearTarget(); //I forgor ðŸ’€
						Return ResolveState ("Idle"); //And go back to wandering.
					}
				}
				Else {TimeSearching = 0; /*A_Log ("Found you");*/} //If the target is visible, then reset the timer again.
				
				//Have the marine run away from grenades about to explode.
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}
				
				//These if statement switches prevent hostile marines from instantly going back to Idle when they have no target.
				If (Target && !bFriendly && Target.bShootable && Target.health > 0)
				{
					//a_log ("im chasing you");
					SM_ShouldBeScared();
					A_Chase ("RifleSmack","DecideAttack");
					SM_ShouldBeScared();
				}
				Else If (!bFriendly) //This never seems to actually run, but like the TF2 coconut, I'm not removing this in case doing so breaks everything.
				{
					//a_log ("when you walkin");
					A_Wander();
				}
				Else
				{
					//a_log ("im not chasing you");
					SM_ShouldBeScared();
					A_Chase ("RifleSmack","DecideAttack");
					SM_ShouldBeScared();
				}
				
				Return State (Null);
			}
			Loop;
		Idle:
			PLAY AABBCCDD 3
			{
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}
				
				A_Wander();
				SM_UpdateTarget();
				SM_LookForTarget();
				
				Return State (Null);
			}
			PLAY A 0 A_Jump (12,"StandStill");
			Loop;
		AlertOtherMarines: //Alerts other marines of the target that the marine just acquired after calling A_LookEx.
			TNT1 A 0 SM_AlertNearbyMarines();
			Goto See;
		StandStill:
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MARA A 10
			{
				If (Random (0,256) >= 220) //Random chance to turn around a bit.
				{
					Angle += RandomPick (20,30,45,-45,-30,-20);
				}
				SM_LookForTarget();
			}
			MARA A 0 A_Jump (24,"Idle");
			Loop;
		ChangePosition: //The marine doesn't check for grenades while here, so there is SOME time window where a marine can be harmed by one.
			MAR2 A 0 A_SetAngle (Angle+Random (-60,60));
			MAR2 AABBCCDD 3 A_Wander (CHF_NORANDOMTURN);
			MAR2 A 0 A_Jump (245,"See"); //High chance to only run once.
			Goto ChangePosition+1;
		RunForReload:
			PLAY AAABBBCCCDDD 2
			{
				bFrightened = True;
				bNoPain = True;
				A_Chase (Null,Null); //Just run away from your target.
				bNoPain = False;
				bFrightened = False;
			}
			PLAY A 0
			{
				EscapeAttempts++;
				If (EscapeAttempts >= 7 || Target && (!IsVisible (Target,True) || Target.Health <= 0))
				{
					EscapeAttempts = 0;
					Return ResolveState ("Reload");
				}
				Return State (Null);
			}
			Loop;
		RunAway: //Makes the marine run away from any grenades about to explode, this state must NEVER be broken.
			TNT1 A 0 {bNoPain = True; bFrightened = True;} //Stop the state from being interrupted, and make the marine run away from the grenade.
			PLAY AABBCCDD 2 A_Chase (Null,Null);
			TNT1 A 0
			{
				If (OriginalTarget && OriginalTarget.Health > 0)
				{Target = OriginalTarget;} //If the marine had a target prior to running from a grenade, and it's still alive, then set it back.
				Else {Target = Null;} //Otherwise just remove the grenade from the target field.
				bNoPain = False;
				bFrightened = False;
			}
			Goto See; //Go back to the see state.
		DecideAttack: //Decide if you should throw a grenade, or just shoot.
			TNT1 A 0 A_JumpIf (GrenadeAttackDecision(),"ThrowGrenade"); //The code for GrenadeAttackDecision is in MarineFunctions.zsc.
			Goto RifleBurst;
		RifleSmack:
			MARM A 6 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MARM B 8 A_CustomMeleeAttack (Random(4,8),"Marine/Melee","Marine/MeleeMiss",'Melee',False); //Blunt force attack, so no blood.
			MARM A 0 A_Jump (96,"ChangePosition"); //If you are in melee range of your enemy, you are probably fucked.
			Goto See;
		RifleBurst:
			MAR2 A 0 A_JumpIf (AmmoUsed > 20,"RunForReload"); //Run out of sight of the target to reload.
			MAR2 A 1 A_FaceTarget();
			MARR A 4 Light ("MarineMuzzleFlash")
			{
				A_CustomBulletAttack (2.4,2.5,1,Random(6,10),"SmartMarinePuff",8196+2,CBAF_NORANDOM|CBAF_AIMFACING,spawnheight:42,-6);
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				AmmoUsed++;
			}
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MAR2 A 1 A_MonsterRefire (96,"See");
			MAR2 A 0 A_Jump (24,"ChangePosition"); //Small chance to change position instead of just shooting in place.
			Loop;
		ThrowGrenade: //https://www.youtube.com/watch?v=BJrxKiW5f-4
			MARG AA 6 A_FaceTarget();
			MARG B 6
			{
				A_StartSound ("Marine/Throw",CHAN_VOICE,attenuation:0.8); //Umf
				FireGrenade (Target,"SM_Grenade",55,1.1,1024);
			}
			MARG B 4;
			Goto See;
		Reload:
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			MARL A 0 {bNoPain = True;}
			MARL ABC 6;
			MARL D 4 A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1);
			MARL C 6;
			MARL B 6
			{
				A_StartSound ("Marine/Reload",CHAN_WEAPON);
				AmmoUsed = 0;
			}
			MARL C 4 {bNoPain = False;}
			Goto See;	
		Pain:
			PLAY G 10 A_Pain();
			Goto See;
	}
}