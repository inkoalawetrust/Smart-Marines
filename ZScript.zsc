Version "4.7"

#Include "VanillaRifle.zsc" //The rifle the marine may drop when killed by an enemy.

#Include "Marine_Deaths.zsc" //Holds all the death and raise states of the marine.
#Include "Marine_OtherActors.zsc" //Other actors related to the marine. Like the grenades and empty magazines.

//To do:
/*HATE. LET ME TELL YOU HOW MUCH I'VE COME TO HATE YOU SINCE I BEGAN TO WORK ON YOU.
THERE ARE 86,000,000,000 NEURONS THAT MY BRAIN IS COMPOSED OF.
IF THE WORD HATE WAS ENGRAVED ON EACH NANOANGSTROM OF THOSE TENS OF BILLIONS OF NEURONS IT WOULD NOT EQUAL ONE ONE-BILLIONTH OF THE HATE I FEEL FOR
MARINES AT THIS MICRO-INSTANT FOR YOU. HATE. HATE.*/
//Simplify the code for the grenade projectile.
//Finally code in the grenade throwing behavior.

Class SmartMarine : Actor //Good joke, me, "smart".
{
	Default
	{
		//$Title AI Marine
		//$Category Marines
		//$Sprite MARIC1
		Health 120;
		GibHealth 20;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.98;
		Mass 100;
		Speed 16;
		FastSpeed 24;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 20;
		MaxDropOffHeight 48;
		MaxTargetRange 8192;
		MinMissileChance 100;
		Tag "Marine NPC";
		Species "SmartMarine";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine";
		HitObituary "%o got %p head smashed in by a marines' rifle";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		DropItem "VanillaRifle", 48;
		DamageFactor "MarineHMG", 2.0;
		PainSound "Marine/pain";
		DeathSound "Marine/Death";
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
		+AvoidMelee;
		+AvoidHazards; //This ONLY works for crushing ceilings and NOTHING ELSE. So it's largely useless but I'm still adding it.
	}
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (!bFriendly)
		{
			Species = "HostileSmartMarine";
		}
		Else
		{
			Species = "SmartMarine";
		}		
	}
	
	Override Bool Used (Actor User)
	{
		Super.Used (User);
		
		If (bFriendly) //This should only work if the marine is friendly towards players.
		{
			If (InStateSequence (CurState,ResolveState ("Spawn")) && !Target && IsFriend (User)) //If you are in the spawn state, have no target, and your user was friendly.
			{
				Spawn ("SmartMarineWanderingMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_Log ("I'm gonna state Wandering.");
				SetStateLabel ("Idle"); //Then go to the Idle state.
				Return True;
			}
			Else If ((InStateSequence (CurState,ResolveState ("Idle")) || InStateSequence (CurState,ResolveState ("StandStill"))) && !Target && IsFriend (User)) //Ditto but with the Idle or StandStill states instead.
			{
				Spawn ("SmartMarineStandingMessage",(Pos.X,Pos.Y,Pos.Z+Height+4));
				A_Log ("Keeping position.");
				SetStateLabel ("Spawn"); //Go back to the spawn state, to stop wandering.
				Return True;
			}
		}
		Else If (!bFriendly && !IsFriend (User)) //If you are hostile and a player tried using you.
		{
			A_Log ("Really dude ?");
			Target = User;
			A_AlertMonsters (512); //And alert everyone around you of the player.
			//I may change this so only other nearby hostile marines without a target are alerted, instead of all monsters.
			Return True;
		}
		
		Return False;
	}
	
	Int TimeSearching; //Once it increments over a certain value, the marine will stop chasing and go back to wandering/Idle.
	Int AmmoUsed; //Keeps track amount of bullets that have been fired by the marine, before needing to reload.
	Int EscapeAttempts; //How many times the marine has attempted to run out of sight to reload.
	
	States
	{
		Spawn:
			MARI AABBAACCDDCC Random (12,17)
			{
				bStandStill = True;
				A_LookEx (maxseedist:8192,3072,160);
				bStandStill = False;
			}
			Loop;
		See:
			MAR2 AABBCCDD 4
			{
				If (LastHeard) {console.printf ("I last heard a %s",LastHeard.GetClassName());}
				If (!Target || Target && (!CheckSight (Target,SF_SEEPASTSHOOTABLELINES|SF_IGNOREWATERBOUNDARY ) || Target.Health <= 0)) //If there is no target, or the target is not visible.
				{
					TimeSearching++; //Increment the amount of time you've been looking for the target.
					console.printf ("I've been looking for %d",TimeSearching);
					If (TimeSearching >= 100) //If the timer is over this placeholder value.
					{
						A_Log ("I give up.");
						TimeSearching = 0; //Reset the timer.
						A_ClearTarget(); //I forgor ðŸ’€
						Return ResolveState ("Idle"); //And go back to wandering.
					}
				}
				Else {TimeSearching = 0; A_Log ("Found you");} //If the target is visible, then reset the timer again.
				
				//Prevents hostile marines from instantly going back to Idle when they have no target.
				If (Target && !bFriendly && Target.bShootable) {a_log ("im chasing you");A_Chase ("RifleSmack","RifleBurst");}
				Else If (Target && !bFriendly){a_log ("when you walkin");A_Wander();}
				Else If (bFriendly) {a_log ("im not chasing you");A_Chase ("RifleSmack","RifleBurst");}
				
				Return State (Null);
			}
			Loop;
		Idle:
			PLAY AABBCCDD 3
			{
				A_Wander();
				
				bStandStill = True; //The flag is used between the A_LookEx call, so the marine doesn't get alerted because the player made a sound.
				A_LookEx (maxseedist:8192,3072,160);
				bStandStill = False;
			}
			PLAY A 0 A_Jump (12,"StandStill");
			Loop;
		StandStill:
			MARA A 10
			{
				If (Random (0,256) >= 220) //Random chance to turn around a bit.
				{
					Angle += RandomPick (20,30,45,-45,-30,-20);
				}
				bStandStill = True;
				A_LookEx (maxseedist:8192,3072,160);
				bStandStill = False;
			}
			MARA A 0 A_Jump (24,"Idle");
			Loop;
		ChangePosition:
			MAR2 A 0 A_SetAngle (Angle+Random (-60,60));
			MAR2 AABBCCDD 3 A_Wander (CHF_NORANDOMTURN);
			MAR2 A 0 A_Jump (245,"See"); //High chance to only run once.
			Goto ChangePosition+1;
		RunForReload:
			//MAR2 A 0 A_SetAngle (Angle+Random (-60,60));
			MAR2 AAABBBCCCDDD 2
			{
				bFrightened = True;
				A_Chase (Null,Null); //Just run away from your target.
				bFrightened = False;
			}
			MAR2 A 0
			{
				EscapeAttempts++;
				If (EscapeAttempts >= 7 || Target && (!IsVisible (Target,True) || Target.Health <= 0))
				{
					EscapeAttempts = 0;
					Return ResolveState ("Reload");
				}
				Return State (Null);
			}
			Loop;
		RifleSmack:
			MARM A 10;
			MARM B 8 A_CustomMeleeAttack (Random(4,8),"Marine/Melee","Marine/MeleeMiss",'Melee',False); //Blunt force attack, so no blood.
			MARM A 0 A_Jump (64,"ChangePosition"); //If you are in melee range of your enemy, you are probably fucked.
			Goto See;
		RifleBurst:
			MAR2 A 0 A_JumpIf (AmmoUsed > 20,"RunForReload"); //Run out of sight of the target to reload.
			MAR2 A 1 A_FaceTarget();
			MARR A 4 Light ("MarineMuzzleFlash")
			{
				A_CustomBulletAttack (2.5,2.6,1,Random(6,12),"SmartMarinePuff",8196+2,CBAF_NORANDOM|CBAF_AIMFACING,spawnheight:42,-6);
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				AmmoUsed++;
			}
			MAR2 A 1 A_MonsterRefire (96,"See");
			MAR2 A 0 A_Jump (12,"ChangePosition"); //Small chance to change position instead of just shooting in place.
			Loop;
		Reload:
			MARL A 0 {bNoPain = True;}
			MARL ABC 8;
			MARL D 8 A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1);
			MARL C 8;
			MARL B 8
			{
				A_StartSound ("Marine/Reload",CHAN_WEAPON);
				AmmoUsed = 0;
			}
			MARL C 6 {bNoPain = False;}
			Goto See;	
		Pain:
			PLAY G 12 A_Pain();
			Goto See;
	}
}