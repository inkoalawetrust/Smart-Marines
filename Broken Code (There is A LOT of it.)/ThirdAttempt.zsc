/* Third time wasn't the charm it seems.

version "2.4"

#Include "VanillaRifle.zsc"
#Include "MarineFunctions.zsc"

//Todo:
//Possibly add a variable that limits the total amount of rifle rounds and grenades they have, and once the marines' rifle runs out, he brings out a pistol which all eventually runs out, or it's infinite.
//Add an explosion sound for the grenade.
//Reimplement their ability to crouch move and fire in sectors with ceilings close to the floor.
//See if I can make the marines run around trying to find cover, and if they find a sufficiently raised floor, crouch behind it and use it as cover to fire. Try this after implementing the above features.
//Try seeing if I could integrate UEAI to the marines somehow.
//The swimmable floor checking ray may need to be fired further down, to prevent marines from accidentally jumping into any swimmable 3D floor.

Class SmartMarine : Actor
{
	Default
	{
		//$Title AI Marine
		//$Category Monsters
		Health 140;
		GibHealth 115;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.9;
		Mass 100;
		Speed 16;
		FastSpeed 24;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 20;
		MaxDropOffHeight 48;
		MaxTargetRange 4096;
		Tag "Friendly Marine";
		Species "SmartMarine";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine";
		HitObituary "o% got %p head smashed in by a marines' rifle";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		DropItem "VanillaRifle", 24;
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
	}
	Int ForgetTimer; //Once this goes above a certain value, the marine stops chasing its' target and wanders around instead. Increments when the target isn't in LOS.
	Int GrenadeChance; //The chance the marine will throw a grenade.
	Int ShotsFired; //How many shots were fired in a burst.
	Int AmmoCount; //How much ammo the marine currently has in his gun.
	Int EscapeAttempts; //How many times the marine should try running away until its' target is not in sight, before giving up and reloading anyway.
	Int WanderType; //If it equals 1 when the marine enters the wander state, it will wander in one direction, if it's 0, it will wander in random directions.
	Int AirSupply; //If this is 0 or less and the marine is fully submerged, he'll begin to drown.
	Actor Grenade; //Points to whatever grenade is nearby that the marine should run from.
	Bool FoundLand; //If true while the marine is in his SwimAndJump state, it'll cause him to jump forwards to reach the land in front of him.
	Mixin SmartMarineFunctions; //Contains the marine's custom functions.
	
	Bool User_Persistent; //If on, the marine will not forget its' target.
	Bool User_NoGrenade; //The marine will not throw grenades.
	Bool User_NoReload; //The marine will not need to reload.
	Bool User_NoMelee; //The marine will not hit enemies with his rifle.
	Bool User_NoDrown; //The marine will not drown after being fully submerged for long enough.
	Bool User_NoSwim; //The marine will not swim across swimmable 3D floors.
	Int User_ForgetThreshold; //The threshold over which the marine will forget its' target, the heigher, the more time he'll chase them.
	Int User_GrenadeThreshold; //The threshold over which the marine will throw a grenade. The higher the value the smaller the chance.
	Int User_LungCapacity; //How much air the marine has when submerged before drowning.
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		EscapeAttempts = 6;
		User_GrenadeThreshold = 360; //Default threshold.
		User_ForgetThreshold = 32; //Default threshold.
		User_LungCapacity = 64; //Default air amount.
		AirSupply = User_LungCapacity;
		AmmoCount = 20;
		If (User_NoMelee) {bAvoidMelee = True;} //If User_NoMelee is on, make the marine avoid getting into melee range.
	}
	
	//This DamageMobj() override is here because otherwise the marine doesn't seem to attack other NPCs harming it if it already has a target.
	Override Int DamageMobj (Actor Inflictor, Actor Source, Int Damage, Name MOD, Int Flags, Double Angle)
	{
		If (Inflictor && Inflictor.bIsMonster && !Inflictor.bCorpse) //If the actor that harmed the marine is a living NPC.
		{
			If (Random (0,16) >= 14) {Self.Target = Inflictor;} //Then have a random chance to attack that actor.
		}
		Return Super.DamageMobj (Inflictor,Source,Damage,MOD,Flags,Angle);
	}
	
	States
	{
		Spawn:
			MARI ABCD 35
			{
				//Return A_JumpIfGrenade();
				A_LookEx (maxseedist:4096+2048,fov:200,label:"Chase");
				Return ResolveState(Null);
			}
			Loop;
		Chase:
			MAR2 ABCDABCD 8
			{
				//If the forget timer is bigger than the user changeable forget threshold variable, and the User_Persistent bool isn't true.
				If (ForgetTimer >= User_ForgetThreshold && !User_Persistent)
				{
					ForgetTimer = 0; //Reset the forget timer.
					a_log ("forgot target,wandering"); //Debug message lol, remove it once the NPC is finished.
					If (Target) //Check for a target
					{
						Target = LastEnemy; //Transfer the actor reference in the target pointer to the built in LastEnemy pointer, so the marine enters its' stand alert state if it has a LastTarget pointer.
						A_ClearTarget(); //Remove the Target pointers.
					}
					Return ResolveState ("Wander"); //Go to the wandering state.
				}
				Return A_JumpIfGrenade(); //Jump to a state if there's a grenade nearby.
				A_Chase ("RifleMelee","DecideAttack");
				If (A_CheckForSwimmableVolume()) {Return ResolveState ("JumpAndSwim");} //Jump into the JumpAndSwim state if there's a 3D floor in front.
				AirSupply = User_LungCapacity; //Reset the amount of air the marine has to breath.
				//If the target is in sight and closer than the marines' sight range, then reset the timer. Otherwise, increment it. If User_Persistent is on, then always reset it.
				If (Target && CheckSight (Target,SF_IGNOREWATERBOUNDARY) && Distance3D (Target) <= 4096+2048 || User_Persistent)
				{
					a_log ("target in sight, remembered again");
					ForgetTimer = 0;
				}
				Else
				{
					ForgetTimer++;
					a_log ("forget timer is");
					a_logint (forgettimer);
				}
				Return ResolveState(Null);
			}
			Loop;
		Wander:
			TNT1 A 0 {WanderType = Random (0,1);}
			PLAY ABCDABCDABCDABCD 8
			{
				Return A_JumpIfGrenade();
				a_log ("im wandering");
				If (WanderType == 1) {A_Wander(CHF_NORANDOMTURN);} Else {A_Wander();} //50-50 chance of the marine going to one of two wander function variants.
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				Return ResolveState(Null);
			}
			TNT1 A 0 A_SetSpeed (16); //Set the speed back to the default value, in case User_NoMelee is on and the marine got in melee range of its' target.
			TNT1 A 0 A_Jump (256/2,"StandAlert"); //A chance for the marine to stand alert for a while before moving again.
			Loop;
		StandAlert:
			MARA AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
			{
				Return A_JumpIfGrenade();
				A_SetTics (Random(1,4));
				a_log ("standing alert");
				If (Random (0,256) >= 240) {Angle += FRandom (45.0,-45.0);} //Look at a random angle between 90 degress relative to the marines' current one.
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				Return ResolveState(Null);
			}
			TNT1 A 0 A_Jump (64,"Wander"); //May go back to wandering.
			Loop;
		RunAway:
			TNT1 A 0
			{
				A_FaceTarget();
				Speed = -20;
				Angle = Angle-180;
			}
			PLAY ABCD 4 A_Chase ("RifleMelee",Null,CHF_NODIRECTIONTURN);
			TNT1 A 0
			{
				A_FaceTarget();
				Angle = Angle-180;
			}
			PLAY ABCD 4 A_Chase ("RifleMelee",Null,CHF_NODIRECTIONTURN|CHF_NORANDOMTURN);
			TNT1 A 0
			{
				EscapeAttempts--;
				Speed = 10;
				bLookAllAround = True;
				If (Target && CheckSight (Target,SF_IGNOREWATERBOUNDARY) == False || EscapeAttempts <= 0)
				{
					A_Log ("No target around, time to reload");
					A_Log ("EscapeAttempts:");
					A_LogInt (EscapeAttempts);
					EscapeAttempts = 6;
					Return ResolveState ("Reload");
				}
				bLookAllAround = False;
				Return ResolveState(Null);
			}
			Loop;
		RunAwayFear:
			TNT1 A 0 {Angle = FRandom(0,360);}
			PLAY ABCDABCDABCDABCDABCDABCD 4
			{
				Speed = GetDefaultSpeed("SmartMarine")+8;
				A_Log ("Bravely bravely run away.");
				A_Wander (CHF_NORANDOMTURN);
				A_LookEx (LOF_DONTCHASEGOAL|LOF_NOSEESOUND|LOF_NOJUMP,0,4096+2048); //Still look for targets when running in fear.
				Speed = GetDefaultSpeed("SmartMarine");
			}
			TNT1 A 0
			{
				If (Target && !Target.bCorpse) {Return ResolveState ("Chase");} //If there's still a target and it isn't dead, then jump to the chase state.
				Target = Null; //Otherwise clear the target pointer and go to the Wandering state.
				Return ResolveState(Null);
			}
			Goto Wander;
		JumpAndSwim: //Uses placeholder sprites until Tabijaky can make some.
			TNT1 A 0 A_ChangeVelocity (FRandom(10,14),z:FRandom(6,8),CVF_RELATIVE); //Jump forward.
			PLAY B 4 A_JumpIf (WaterLevel >= 2,1);
			Goto JumpAndSwim+1;
			
			TNT1 A 0 A_JumpIf (FoundLand,4); //Jump over the Goto jump if Found Land is true.
			"####" ABCD 8 //The swimming sequence. AKA the actual swimming part.
			{
				If (WaterLevel == 3) //If fully submerged
				{
					AirSupply--;
					If (AirSupply <= 0 && WaterLevel == 3) //and the amount of air on the marines' lungs is 0 or less
					{
						A_DamageSelf (2,'Drowning'); //Then begin drowning.
					}
				}
				Else {AirSupply = User_LungCapacity;} //Otherwise just reset the air supply.
				A_SpawnItemEx ("SmartMarineLandCheck",128,flags:SXF_SETMASTER); //Turns the FoundLand boolean on if it spawned on land.
				A_Chase (Null,Null,CHF_NOPLAYACTIVE|CHF_DONTMOVE);
				A_ChangeVelocity (FRandom(4,8),z:FRandom(6,10));
			}
			Goto JumpAndSwim+3;
			
			TNT1 A 0 {FoundLand = False;} //Turn the bool off.
			PLAY B 35 A_ChangeVelocity (FRandom(12,16),z:FRandom(16,20),CVF_RELATIVE); //Jump out of the water.
			Goto Chase;
		RifleMelee:
			MARM A 12
			{
				If (User_NoMelee) {Speed = 32; Return ResolveState ("Wander");} //If User_NoMelee is on, then wandering away and double your speed.
				Return ResolveState(Null); //Otherwise continue like normal.
			}
			MARM B 8 A_CustomMeleeAttack (8+Random(0,8),"Marine/Melee","Marine/MeleeMiss","Melee",False); //It's a blunt force attack, so no bleeding.
			MARM A 6;
			TNT1 A 0
			{
				If (Distance3D (Target) <= MeleeRange) //If the distance to the target is equal or less than the melee range.
				{
					Return A_Jump (64,"RifleMelee"); //Chance for the marine to hit with his rifle twice.
				}
				Return ResolveState(Null);
			}
			Goto Chase;
		DecideAttack:
			TNT1 A 0
			{
				GrenadeChance = Random(0,512); //Generate a random chance of the marine throwing a grenade.
				If (Target)
				{
					If (Target.Health <= 100) {GrenadeChance += 4;} //Increase the chance by 4 if the target has over 100 health.
					
					BlockThingsIterator CheckAroundTarget = BlockThingsIterator.Create (Target,256); //Check around the target for hostiles.
					Actor FoundActor;
					While (CheckAroundTarget.Next())
					{
						FoundActor = CheckAroundTarget.Thing;
						//Increment the chance of throwing a grenade for each hostile NPC with 20 HP and above.
						If (FoundActor && FoundActor != Self && bIsMonster == True && FoundActor.Health >= 20 && IsHostile (FoundActor))
						{
							GrenadeChance += Random (1,3);
						}
					}
					//Throw the grenade if the grenade chance is over the customizable threshold and User_NoGrenade is off.
					If (GrenadeChance >= User_GrenadeThreshold && !User_NoGrenade) {SetStateLabel("ThrowGrenade");}
				}
			}
			Goto RifleBurst;
		RifleBurst:
			TNT1 A 0 A_Jump (60,"Chase"); //May decide to not fire and go back to chasing the target.
			TNT1 A 0
			{
				If (ShotsFired >= 5) {a_log ("rifle burst fired, reseting it and going back to chase");ShotsFired = 0; SetStateLabel ("Chase");} //If a burst of 5 shots or more was fired, go back to chasing and reset the ShotsFired counter.
				If (AmmoCount <= 0 && !User_NoReload) {a_log ("gun out of ammo, reloading");SetStateLabel ("RunAway");} //If no ammo is left and User_NoReload is false, then go to the run away state to reload.
			}
			MAR2 A 3 A_FaceTarget ();
			MARR A 2 Bright
			{
				A_AttachLight ("RifleLight",DynamicLight.PointLight,"FFFF73",Random(32,40),0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,43));
				A_Log ("Pew");
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				A_CustomBulletAttack (2.5,2.6,1,Random(4,10),"SmartMarinePuff",8196+2,CBAF_NORANDOM,spawnheight:42,-6);
				AmmoCount--;
				a_log ('ammo count is');
				a_logint (ammocount);
				ShotsFired++;
				a_log ('shots fired are');
				a_logint (ShotsFired);
			}
			TNT1 A 0 A_RemoveLight ("RifleLight");
			TNT1 A 0 A_MonsterRefire (230,"Chase");
			Goto RifleBurst+1;
		Reload:
			MARL ABC 8;
			MARL D 8 A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1);
			MARL C 8;
			MARL B 8
			{
				A_StartSound ("Marine/Reload",CHAN_WEAPON);
				AmmoCount = 20;
			}
			MARL C 6;
			Goto Chase;
		ThrowGrenade:
			MARG AA 8 A_FaceTarget();
			MARG B 8
			{
				A_Log ("Throwing grenade");
				A_StartSound ("Marine/Throw");
				A_ThrowGrenade ("SmartMarineGrenade",38,FRandom(16,24),FRandom(4,8));
			}
			MARG B 4;
			Goto Chase;
		Pain:
			PLAY G 2 A_Log ("Oof ouch");
			PLAY G 4 A_StartSound ("Marine/Pain",CHAN_VOICE);
			PLAY G 2;
			Goto Chase;
		Death:
			PLAY H 4
			{
				A_Log ("Oof");
				A_StartSound ("Marine/Death",CHAN_VOICE);
				A_NoBlocking();
			}
			PLAY IJKLMN 4;
			PLAY N -1;
			Stop;
		XDeath:
			PLAY O 4
			{
				A_Log ("Mega oof");
				A_StartSound("Marine/XDeath");
				A_NoBlocking();
			}
			PLAY PQRSTUVW 4;
			PLAY W -1;
			Stop;
	}
}

//$GZDB_SKIP

Class SmartMarineGrenade : Actor
{
	Default
	{
		Radius 4;
		Height 8;
		Mass 1;
		Gravity 0.5;
		Scale 0.5;
		BounceType "Hexen";
		BounceSound "Grenade/Bounce";
		Obituary "%o got blown up by a grenade";
		Projectile;
		-NoGravity;
		-NoBlockmap;
		+RollSprite;
		+FloorClip;
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	Int FuseTimer; //The time the grenade has before exploding.
	Int RollDirection; //The random direction in which the grenade will roll.
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx ("SmartMarineGrenadeLever",yvel:FRandom(-2,-4),FRandom(2,4));
				FuseTimer = 25/2; //This gives the grenade approximately 3 seconds before exploding.
				RollDirection = Random (1,2);
			}
			MGRE B 8
			{
				If (RollDirection <= 1) {a_log ("rolling here");Roll += 20;}
				If (RollDirection >= 2 ) {a_log ("rolling there");Roll += -20;}
				//If the fuse timer is 0 and the grenade exploded above 32 MU, enter the air explosion state.
				If (FuseTimer <= 0 && (Pos.Z - FloorZ) >= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Air");}
				//If the fuse timer is 0 and the grenade exploded below 32 MU, enter the ground explosion state.
				If (FuseTimer <= 0 && (Pos.Z - FloorZ) <= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Floor");}
				FuseTimer--;
				a_logint (fusetimer);
				Return ResolveState(Null);
			}
			Goto Spawn+1;
		Death.Floor:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				//Add an explosion sound.
				A_QuakeEx (1,1,1,35,0,384);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",256,0,DYNAMICLIGHT.LF_ATTENUATE,param:1.714285714285714*3.4);
				A_SetScale (3.0); //Directly modifying the scale doesn't work for some reason.
				Roll = 0;
			}
			GXPL A 2 Bright;
			GXPL B 4 Bright A_Explode (64,96,XF_NOTMISSILE,fulldamagedistance:24);
			GXPL CDEFGHIJKLMNO 4 Bright;
			Stop;
		Death.Air:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				//Add an explosion sound.
				A_QuakeEx (1,1,1,35,0,384);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",256,0,DYNAMICLIGHT.LF_ATTENUATE,param:1.714285714285714*3.4);
				A_SetScale (3.0);
				Roll = 0;
			}
			GAXP A 4 Bright;
			GAXP B 4 Bright A_Explode (48,96,XF_NOTMISSILE,fulldamagedistance:16);
			GAXP CDEFGHIJ 4 Bright;
			Stop;
	}
}

Class SmartMarineGrenadeLever : Actor //The lever the grenade drops once the pin is pulled.
{
	Default
	{
		Scale 0.5;
		+NoBlockmap;
		+RollSprite;
	}
	States
	{
		Spawn:
			MGRE C 1 NoDelay
			{
				If (Pos.Z - FloorZ >= 1) {A_SetRoll (Roll+5,SPF_INTERPOLATE);}
				Else {Roll = 0;}
			}
			Loop;
	}
}

Class SmartMarineEmptyMagazine : Actor
{
	Default {Scale 0.75; +NoBlockmap; +RollSprite;}
	States
	{
		Spawn:
			MARL Z 16 NoDelay
			{
				If (Pos.Z - FloorZ >= 1) {Roll += 45;}
				Else {Roll = 45;} //Fall sideways on the floor.
			}
			Loop;
	}
}

Class SmartMarinePuff : BulletPuff
{
	Default
	{
		Species "SmartMarine";
		Decal "BulletChip";
		+MThruSpecies;
	}
}

Class SmartMarineLandCheck : Actor //This is used by the marine to check if there's land in front of him to jump to while swimming.
{
	Default {+NoInteraction;}
	Mixin SmartMarineFunctions;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		//If no swimmable floor is below the actor, and it has a master, and that master is a marine, then turn the FoundLand boolean on.
		If (!A_CheckForSwimmableVolume (45,0) && Master && Master.GetClassName() == 'SmartMarine')
		{
			//SmartMarine(Master).FoundLand = True; //Use this line if Master.FoundLand does not work.
			//Let SmartMarine = (Class<MyMarineClass>)(Master); //Or use this one if the above doesn't work either.
			//Master.FoundLand = True;
			SmartMarine(Master).FoundLand = True;
		}
		Destroy();
	}
}