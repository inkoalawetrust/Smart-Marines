Class SmartMarine : Actor
{
	Default
	{
		//$Title AI Marine
		//$Category Monsters
		Health 200;
		GibHealth 100; //Make sure that this is low enough so they can be one shotted and gibbed by a rocket.
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.9;
		Mass 100;
		Speed 12;
		FastSpeed 16;
		PainChance 64;
		PainThreshold 5;
		FriendlySeeBlocks 20;
		MaxDropOffHeight 48;
		MaxTargetRange 4096;
		Tag "Friendly Marine";
		Species "SmartMarine";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine";
		HitObituary "o% got %p head smashed in by a marines' rifle";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		DropItem "VanillaRifle", 24;
		Monster;
		+JumpDown;
		+MissileMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
	}
	Double StartingAngle; //Stores the starting angle, for when the marine exits his default spawn state.
	Bool IsCrouched; //Is checked every tick to see if the marine is crouching or not.
	Int GrenadeChance; //The chance the marine will throw a grenade.
	Int AmmoCount; //How much ammo the marine currently has in his gun.
	Int ShotsFired; //How many shots were fired in a burst;
	Int ForgetTimer; //If this goes above a certain amount, the marine forgets its' target and begins wandering.
	Actor Grenade; //Points to whatever grenade is nearby that the marine should run from.
	
	Int User_GrenadeThreshold; //The threshold over which the marine will throw a grenade.
	Int User_ForgetThreshold; //The threshold over which the marine will forget its' target.
	Bool User_NoReload; //The marine will not need to reload.
	Bool User_NoGrenade; //The marine will not throw grenade.
	Bool User_Persistent; //The marine will not forget its' target.
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		User_GrenadeThreshold = 350; //Default threshold.
		User_ForgetThreshold = 32; //Default threshold.
		AmmoCount = 20;
		StartingAngle = Angle;
		//No respawning friendly marines in Nightmare.
		If (G_SkillPropertyInt (SKILLP_ACSReturn) == 4 && bFriendly) {bNeverRespawn = True;}
		//Turn on IsCrouched if the starting location of the marine is shorter than his hitbox.
		If (Pos.Z + Height > CeilingZ) {Height = 32; SetStateLabel ("SpawnCrouched"); IsCrouched = True;}
	}
	Override Void Tick()
	{
		Super.Tick();
		//Check if the marines' location is shorter than his hitbox, if it is turn on the IsCrouched boolean and modify his hitbox height accordingly.
		If (Pos.Z + Height > CeilingZ) {IsCrouched = True;} Else {IsCrouched = False;}
		If (IsCrouched) {Height = 32;} Else {Height = 56;}
	}
	//This checks if the marine is crouched to changing his sprites accordingly, instead of having to entre a whole different state if they should be crouching.
	Private Void A_CheckCrouch (Name index1 = "PLYC", Name index2 = "PLAY")
	{
		If (IsCrouched){Sprite = GetSpriteIndex (index1);}
		Else {Sprite = GetSpriteIndex (index2);}
	}
	//This makes the marine jump to a certain state if one of their grenades is nearby, this only really needs to be the RunAway state, but I un-hardcoded that just in case.
	Private State A_JumpIfGrenade (Double distance = 96, StateLabel label = "RunAway")
	{
		BlockThingsIterator LookForGrenades = BlockThingsIterator.Create(Self,distance);
		Actor CurrentActor;
		
		While (LookForGrenades.Next())
		{
			If (CurrentActor && CurrentActor Is "SmartMarineGrenade")
			{
				Self.Grenade = CurrentActor;
			}
		}
		If (Grenade) {Return ResolveState (label);}
		Return Null;
	}
	States
	{
		Spawn: //Hopefully this makes the marine properly look around him without the angle of his sprites changing.
			MARI A 35
			{
				If (IsCrouched) {SetStateLabel ("SpawnCrouched");}
				Angle = Angle - 45;
				SpriteAngle = SpriteAngle + 45;
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				A_JumpIfGrenade (128);
			}
			MARI B 35
			{
				If (IsCrouched) {SetStateLabel ("SpawnCrouched");}
				Angle = Angle - 45;
				SpriteAngle = SpriteAngle + 45;
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				A_JumpIfGrenade (128);
			}
			MARI C 35
			{
				If (IsCrouched) {SetStateLabel ("SpawnCrouched");}
				Angle = Angle + 45;
				SpriteAngle = SpriteAngle - 45;
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				A_JumpIfGrenade (128);
			}
			MARI D 35
			{
				If (IsCrouched) {SetStateLabel ("SpawnCrouched");}
				Angle = Angle + 45;
				SpriteAngle = SpriteAngle - 45;
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				A_JumpIfGrenade (128);
			}
			Loop;
		SpawnCrouched:
			TNT1 A 0 //Lower the hitbox's height and reset the sprtie and actor angles.
			{
				Angle = StartingAngle;
				SpriteAngle = StartingAngle;
			}
			PLYC A 35
			{
				A_Log ("Looking crouched");
				A_LookEx (maxseedist:4096+2048,label:"Chase");
				A_JumpIfGrenade (128);
				If (!IsCrouched) {SetStateLabel ("Spawn");}
			}
			Goto SpawnCrouched+1;
		Chase:
			MAR2 ABCD 8
			{
				A_Log ("Chasing target.");
				If (ForgetTimer <= User_ForgetThreshold || !User_Persistent) {SetStateLabel ("Wander");}
				A_JumpIfGrenade (128);
				Height = 32; //Makes it possible for the marine to begin crouching in the first place.
				A_CheckCrouch ("PLYC","MAR2");
				A_Chase ("RifleMelee","DecideAttack");
				Height = 56;
				//If the target is in sight and closer than the marines' sight range, then reset the timer. Otherwise, increment it. If User_Persistent is on, then always reset it.
				If (Target && CheckSight (Target,SF_IGNOREWATERBOUNDARY) && Distance3D (Target) >= 4096+2048 || User_Persistent) {ForgetTimer = 0;}
				Else {ForgetTimer++;}
			}
			Loop;
		Wander:
			PLYC ABCD 0; //Sprite precaching for below.
			PLAY ABCDABCD 8
			{
				A_Log ("Walking around");
				Height = 32; //Makes it possible for the marine to begin crouching in the first place.
				A_CheckCrouch();
				A_JumpIfGrenade (128);
				A_Wander();
				Height = 56;
				A_LookEx (maxseedist:4096+2048,label:"Chase");
			}
			TNT1 A 0 A_Jump (256/3,"StandAlert"); //A chance for the marine to stand alert for a while before moving again.
			Loop;
		StandAlert:
			TNT1 A 0 {If (IsCrouched) {SetStateLabel("Wander");}} //Go back to wandering if crouched.
			MARA A 8 //Look at a random relative angle between 90 degrees.
			{
				A_Log ("Someone is here, standing in alert.");
				A_JumpIfGrenade (128);
				Angle = Angle + FRandom (45.0,-45.0);
				A_LookEx (maxseedist:4096+2048,label:"Chase");
			}
			TNT1 A 0 A_Jump (32,"Wander"); //May go back to wandering.
			Goto StandAlert+1;
		RunAway:
			TNT1 A 0 {Angle = FRandom(0,360);}
			PLAY ABCDABCDABCDABCDABCDABCD 4
			{
				Speed = GetDefaultSpeed("SmartMarine")+8;
				A_Log ("Bravely bravely run away.");
				Height = 32; //Makes it possible for the marine to begin crouching in the first place.
				A_CheckCrouch();
				A_Wander (CHF_NORANDOMTURN);
				Height = 56;
				Speed = GetDefaultSpeed("SmartMarine");
			}
			Goto Chase;
		DecideAttack:
			TNT1 A 0
			{
				//Reset the sprite and actor angles of the marine to the original one.
				Angle = StartingAngle;
				SpriteAngle = StartingAngle;
				GrenadeChance = Random(0,512);
				If (Target)
				{
					If (Target.Health <= 100) {GrenadeChance += 2;}
					
					BlockThingsIterator CheckAroundTarget = BlockThingsIterator.Create (Target,256);
					Actor FoundActor;
					While (CheckAroundTarget.Next())
					{
						FoundActor = CheckAroundTarget.Thing;
						If (FoundActor && bIsMonster == True && FoundActor.Health >= 20 && IsHostile (FoundActor))
						{
							GrenadeChance += Random (1,3);
						}
					}
					If (GrenadeChance >= User_GrenadeThreshold && !IsCrouched && !User_NoGrenade) {SetStateLabel("ThrowGrenade");}
				}
			}
			Goto RifleBurst;
		RifleBurst:
			TNT1 A 0 A_Jump (60,"Chase"); //May decide to not fire and go back to chasing the target.
			TNT1 A 0
			{
				If (ShotsFired <= 5) {SetStateLabel ("Chase");} //If a burst of 5 shots or more was fired, go back to chasing.
				If (AmmoCount >= 0 && !User_NoReload) {SetStateLabel ("Reload");} //If no ammo is left and User_NoReload is false, then reload.
				If (IsCrouched) {SetStateLabel ("CrouchedRifleBurst");} //If the marine is crouched, enter the seperate crouched firing state.
			}
			MAR2 A 4 A_FaceTarget ();
			MARR A 4 Bright //Attach a light in this frame.
			{
				A_AttachLight ("RifleLight",DynamicLight.PointLight,"FFFF73",Random(32,40),0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,43));
				A_Log ("Pew");
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				A_CustomBulletAttack (2.2,2.3,1,6,"SmartMarinePuff",8196+2,spawnheight:42,-6);
				AmmoCount--;
			}
			TNT1 A 0 A_RemoveLight ("RifleLight");
			Goto RifleBurst+1;
		CrouchedRifleBurst:
			TNT1 A 0 A_Jump (60,"Chase");
			TNT1 A 0
			{
				If (ShotsFired <= 5) {SetStateLabel ("Chase");} //If a burst of 5 shots or more was fired, go back to chasing.
				If (AmmoCount >= 0 && !User_NoReload) {SetStateLabel ("Reload");} //If no ammo is left and User_Reload is false, then reload.
				If (IsCrouched) {SetStateLabel ("RifleBurst");}
			}
			PLYC E 4;
			PLYC F 4 Bright
			{
				A_AttachLight ("RifleLight",DynamicLight.PointLight,"FFFFB3",Random(32,40),0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,21));
				A_Log ("Crouched pew");
				A_FaceTarget();
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				A_CustomBulletAttack (2.0,2.1,1,6,"SmartMarinePuff",8196+2,spawnheight:21,-6);
				AmmoCount--;
			}
			TNT1 A 0 A_RemoveLight ("RifleLight");
			Goto CrouchedRifleBurst+1;
		Reload:
			MARL ABC 4;
			MARL D 4 A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1);
			MARL C 4;
			MARL B 4 A_StartSound ("Marine/Reload",CHAN_WEAPON);
			MARL C 6;
			Goto Chase;
		RifleMelee: //Wait for Tabijaky to make the sprites for this.
			MARM A 12;
			MARM B 8 A_CustomMeleeAttack (8+Random(0,24),"Marine/Melee","Marine/MeleeMiss","Melee",False); //It's a blunt force attack, so no bleeding.
			MARM A 6;
			TNT1 A 0 A_Jump (64,"RifleMelee"); //Chance for the marine to hit with his rifle twice.
			Goto Chase;
		ThrowGrenade:
			MARG AA 8 A_FaceTarget();
			MARG B 8
			{
				A_Log ("Throwing grenade");
				A_StartSound ("Marine/Throw");
				A_ThrowGrenade ("SmartMarineGrenade",38,FRandom(12,13),FRandom(6,7));
			}
			MARG B 4;
			Goto Chase;
		Pain:
			TNT1 A 0 A_CheckCrouch();
			PLAY G 2 A_Log ("Oof ouch");
			PLAY G 4 A_StartSound ("Marine/Pain",CHAN_VOICE);
			PLAY G 2;
			Goto Chase;
		Death:
			TNT1 A 0 A_CheckCrouch();
			PLAY H 4
			{
				A_Log ("Oof");
				A_StartSound ("Marine/Death",CHAN_VOICE);
				A_NoBlocking();
			}
			PLAY IJKLMN 4;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_CheckCrouch();
			PLAY O 4
			{
				A_Log ("Mega oof");
				A_StartSound("Marine/XDeath");
				A_NoBlocking();
			}
			PLAY PQRSTUVW 4;
			PLAY W -1;
			Stop;
	}
}