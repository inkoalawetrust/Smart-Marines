Class SmartMarine2 : Actor
{
	Default
	{
		//$Title AI Marine
		//$Category Monsters
		Health 140;
		GibHealth 115;
		Height 56;
		DeathHeight 12;
		CameraHeight 50;
		Radius 16;
		YScale 0.9;
		Mass 100;
		Speed 16;
		FastSpeed 24;
		PainChance 96;
		PainThreshold 5;
		FriendlySeeBlocks 20;
		MaxDropOffHeight 48;
		MaxTargetRange 4096;
		Tag "Friendly Marine";
		Species "SmartMarine";
		Decal "BulletChip";
		Obituary "%o was shot to death by a marine";
		HitObituary "o% got %p head smashed in by a marines' rifle";
		DropItem "Clip";
		DropItem "Clip", 128, 2;
		DropItem "ClipBox", 64;
		DropItem "VanillaRifle", 24;
		Monster;
		+JumpDown;
		+MissileMore;
		+MissileEvenMore;
		+Telestomp;
		+NoInfightSpecies;
		+FloorClip;
	}
	Int ForgetTimer; //Once this goes above a certain value, the marine stops chasing its' target and wanders around instead. Increments when the target isn't in LOS.
	Int GrenadeChance; //The chance the marine will throw a grenade.
	Int ShotsFired; //How many shots were fired in a burst.
	Int AmmoCount; //How much ammo the marine currently has in his gun.
	
	Bool User_Persistent; //If on, the marine will not forget its' target.
	Bool User_NoGrenade; //The marine will not throw grenades.
	Bool User_NoReload; //The marine will not need to reload.
	Bool User_NoMelee; //The marine will not hit enemies with his rifle.
	Int User_ForgetThreshold; //The threshold over which the marine will forget its' target, the height, the more it'll chase them.
	Int User_GrenadeThreshold; //The threshold over which the marine will throw a grenade.
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		User_GrenadeThreshold = 350; //Default threshold.
		User_ForgetThreshold = 32; //Default threshold.
		AmmoCount = 20;
		If (User_NoMelee) {bAvoidMelee = True;} //If User_NoMelee is on, make the marine avoid getting into melee range.
	}
	//This DamageMobj() override is here because otherwise the marine doesn't seem to attack other NPCs harming it if it already has a target.
	Override Int DamageMobj (Actor Inflictor, Actor Source, Int Damage, Name MOD, Int Flags, Double Angle)
	{
		If (Inflictor && Inflictor.bIsMonster && !Inflictor.bCorpse) //If the actor that harmed the marine is a living NPC.
		{
			If (Random (0,16) >= 14) {Self.Target = Inflictor;} //Then have a random chance to attack that actor.
		}
		Return Super.DamageMobj (Inflictor,Source,Damage,MOD,Flags,Angle);
	}
	States
	{
		Spawn:
			TNT1 A 0 {If (LastEnemy) {SetStateLabel ("Wander");}}
			MARI ABCD 35 A_LookEx (maxseedist:4096+2048,fov:200,label:"Chase");
			Loop;
		Chase:
			MAR2 ABCDABCD 8
			{
				//If the forget timer is bigger than the user changeable forget threshold variable, and the User_Persistent bool isn't true.
				If (ForgetTimer >= User_ForgetThreshold && !User_Persistent)
				{
					ForgetTimer = 0; //Reset the forget timer.
					a_log ("forgot target,wandering"); //Debug message lol, remove it once the NPC is finished.
					If (Target) //Check for a target
					{
						Target = LastEnemy; //Transfer the actor reference in the target pointer to the built in LastEnemy pointer, so the marine enters its' stand alert state if it has a LastTarget pointer that isn't null.
						A_ClearTarget(); //Remove the Target pointers.
					}
					Return ResolveState ("Wander"); //Go to the wandering state.
				}
				A_Chase ("RifleMelee","DecideAttack");
				//If the target is in sight and closer than the marines' sight range, then reset the timer. Otherwise, increment it. If User_Persistent is on, then always reset it.
				If (Target && CheckSight (Target,SF_IGNOREWATERBOUNDARY) && Distance3D (Target) <= 4096+2048 || User_Persistent)
				{
					a_log ("target in sight, remembered again");
					ForgetTimer = 0;
				}
				Else
				{
					ForgetTimer++;
					a_log ("forget timer is");
					a_logint (forgettimer);
				}
				Return ResolveState(Null);
			}
			Loop;
		Wander:
			PLAY ABCDABCDABCDABCD 8
			{
				a_log ("im wandering");
				If (Random (0,1) == 1) {A_Wander();} Else {A_Wander(CHF_NORANDOMTURN);} //50-50 chance of the marine going to one of two wander function variants.
				A_LookEx (maxseedist:4096+2048,label:"Chase");
			}
			TNT1 A 0 A_SetSpeed (16); //Set the speed back to the default value, in case User_NoMelee is on and the marine got in melee range of its' target.
			TNT1 A 0 A_Jump (256/2,"StandAlert"); //A chance for the marine to stand alert for a while before moving again.
			Loop;
		StandAlert:
			MARA AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
			{
				A_SetTics (Random(1,4));
				a_log ("standing alert");
				If (Random (0,256) >= 240) {Angle += FRandom (45.0,-45.0);} //Look at a random angle between 90 degress relative to the marines' current one.
				A_LookEx (maxseedist:4096+2048,label:"Chase");
			}
			TNT1 A 0 A_Jump (64,"Wander"); //May go back to wandering.
			Loop;
		RifleMelee:
			MARM A 12
			{
				If (User_NoMelee) {Speed = 32; Return ResolveState ("Wander");} //If User_NoMelee is on, then wandering away and double your speed.
				Return ResolveState(Null); //Otherwise continue like normal.
			}
			MARM B 8 A_CustomMeleeAttack (8+Random(0,8),"Marine/Melee","Marine/MeleeMiss","Melee",False); //It's a blunt force attack, so no bleeding.
			MARM A 6;
			TNT1 A 0
			{
				If (Distance3D (Target) <= MeleeRange) //If the distance to the target is equal or less than the melee range.
				{
					Return A_Jump (64,"RifleMelee"); //Chance for the marine to hit with his rifle twice.
				}
				Return ResolveState(Null);
			}
			Goto Chase;
		DecideAttack:
			TNT1 A 0
			{
				GrenadeChance = Random(0,512); //Generate a random chance of the marine throwing a grenade.
				If (Target)
				{
					If (Target.Health <= 100) {GrenadeChance += 4;} //Increase the chance by 4 if the target has over 100 health.
					
					BlockThingsIterator CheckAroundTarget = BlockThingsIterator.Create (Target,256); //Check around the target for hostiles.
					Actor FoundActor;
					While (CheckAroundTarget.Next())
					{
						FoundActor = CheckAroundTarget.Thing;
						//Increment the chance of throwing a grenade for each hostile NPC with 20 HP and above.
						If (FoundActor && FoundActor != Self && bIsMonster == True && FoundActor.Health >= 20 && IsHostile (FoundActor))
						{
							GrenadeChance += Random (1,3);
						}
					}
					//Throw the grenade if the grenade chance is over the customizable threshold and User_NoGrenade is off.
					If (GrenadeChance >= User_GrenadeThreshold && !User_NoGrenade) {SetStateLabel("ThrowGrenade");}
				}
			}
			Goto RifleBurst;
		RifleBurst:
			TNT1 A 0 A_Jump (60,"Chase"); //May decide to not fire and go back to chasing the target.
			TNT1 A 0
			{
				If (ShotsFired >= 5) {a_log ("rifle burst fired, reseting it and going back to chase");ShotsFired = 0; SetStateLabel ("Chase");} //If a burst of 5 shots or more was fired, go back to chasing and reset the ShotsFired counter.
				If (AmmoCount <= 0 && !User_NoReload) {a_log ("gun out of ammo, reloading");SetStateLabel ("Reload");} //If no ammo is left and User_NoReload is false, then reload.
			}
			MAR2 A 3 A_FaceTarget ();
			MARR A 2 Bright
			{
				A_AttachLight ("RifleLight",DynamicLight.PointLight,"FFFF73",Random(32,40),0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,43));
				A_Log ("Pew");
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				A_CustomBulletAttack (2.5,2.6,1,6+Random(0,2),"SmartMarinePuff",8196+2,CBAF_NORANDOM,spawnheight:42,-6);
				AmmoCount--;
				a_log ('ammo count is');
				a_logint (ammocount);
				ShotsFired++;
				a_log ('shots fired are');
				a_logint (ShotsFired);
			}
			TNT1 A 0 A_RemoveLight ("RifleLight");
			TNT1 A 0 A_MonsterRefire (230,"Chase");
			Goto RifleBurst+1;
		Reload:
			MARL ABC 8;
			MARL D 8 A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1);
			MARL C 8;
			MARL B 8
			{
				A_StartSound ("Marine/Reload",CHAN_WEAPON);
				AmmoCount = 20;
			}
			MARL C 6;
			Goto Chase;
		ThrowGrenade:
			MARG AA 8 A_FaceTarget();
			MARG B 8
			{
				A_Log ("Throwing grenade");
				A_StartSound ("Marine/Throw");
				A_ThrowGrenade ("SmartMarineGrenade",38,FRandom(24,32),FRandom(8,12));
			}
			MARG B 4;
			Goto Chase;
		Pain:
			PLAY G 2 A_Log ("Oof ouch");
			PLAY G 4 A_StartSound ("Marine/Pain",CHAN_VOICE);
			PLAY G 2;
			Goto Chase;
		Death:
			PLAY H 4
			{
				A_Log ("Oof");
				A_StartSound ("Marine/Death",CHAN_VOICE);
				A_NoBlocking();
			}
			PLAY IJKLMN 4;
			PLAY N -1;
			Stop;
		XDeath:
			PLAY O 4
			{
				A_Log ("Mega oof");
				A_StartSound("Marine/XDeath");
				A_NoBlocking();
			}
			PLAY PQRSTUVW 4;
			PLAY W -1;
			Stop;
	}
}