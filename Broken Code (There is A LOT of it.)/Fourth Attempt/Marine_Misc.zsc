//Miscellaneous things that may not fit into any particular group, and may not warrant their own file,
//as of right now though, this code is all related to mortality.

Extend Class SmartMarine
{
	Void HandleMarineColoring() //Handles the coloring of the marines.
	{
		If (!User_Color || User_Color ~== "") {Return;} //Don't run the code if User_Color is empty.
		
		//Handles the random color choice that is performed if the color name given is "Random".
		If (User_Color ~== "Random")
		{
			Static Const String ColorArray[] = {"Red","Gray","White","Black","Blue","Yellow","Orange","Pink"}; //Contains all the valid color names.
			
			User_Color = ColorArray[Random(0,7)]; //Randomly picks a color string.
		}

		A_SetTranslation (String.Format("Marine_%s", User_Color));
	}
	
	//Because A_LookEx doesn't actually do its' job when the marine is wandering or standing and looking around. I hope this is the last time those two states break.
	Protected Void A_SMarineLook()
	{
		If (ListenForTargets()) {SetStateLabel ("See");}
		If (LookForEnemies (False) || LookForPlayers (False) || LookForPlayerAllies())
		{
			If (Target && CheckSight (Target))
			{
				SetStateLabel ("See");
			}
		}
	}
	
	Bool ListenForTargets (Double Distance = 2048)
	{
		If (!Target)
		{
			BlockThingsIterator ListenArea = BlockThingsIterator.Create (Self,Distance);
					
			While (ListenArea.Next())
			{
				//The pointer is valid and you aren't the actor iterated.
				If (ListenArea.Thing && ListenArea.Thing != Self)
				//The actor is an NPC or player.
				If (ListenArea.Thing.bIsMonster || ListenArea.Thing Is "PlayerPawn")
				//The actor is hostile to you and still alive.
				If (IsHostile (ListenArea.Thing) && ListenArea.Thing.Health >= 0)
				//And of course, it's actually playing a sound.
				If (ListenArea.Thing == Self.LastHeard)
				{
					Target = ListenArea.Thing;
					a_log ("i hear you");
					Return True;
				}
			}
		}
		Return False;
	}
	
	Bool LookForPlayerAllies (Double Distance = 8192)
	{
		If (!Target)
		{
			BlockThingsIterator FindFriendlyNPC = BlockThingsIterator.Create (Self,Distance);
			
			While (FindFriendlyNPC.Next())
			{
				//The pointer is valid and you aren't the actor iterated.
				If (FindFriendlyNPC.Thing && FindFriendlyNPC.Thing != Self) {Continue;}
				//You aren't friendly to the player yourself, but the other actor is.
				If (!Self.bFriendly && FindFriendlyNPC.Thing.bFriendly) {Continue;}
				//The actor is a monster/NPC, and isn't dead.
				If (FindFriendlyNPC.Thing.bIsMonster && FindFriendlyNPC.Thing.Health >= 0) {Continue;}
				//You can actually see the other actor.
				If (IsVisible (FindFriendlyNPC.Thing,False))
				{
					Target = FindFriendlyNPC.Thing;
					Return True;
				}
			}
		}
		Return False;
	}
	
	States
	{
		Pain: //Life
			PLAY G 3;
			PLAY G 3 A_StartSound("Marine/Pain",CHAN_VOICE);
			Goto See;
		
		Death: //Oof
			PLAY H 5;
			PLAY I 5 A_StartSound("Marine/Death",CHAN_VOICE);
			PLAY J 5 A_NoBlocking;
			PLAY KLM 5;
			PLAY N -1;
			Stop;
		
		XDeath: //Mega oof
			PLAY O 5;
			PLAY P 5 A_StartSound("Marine/XDeath",CHAN_VOICE);
			PLAY Q 5 A_NoBlocking();
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		
		Raise: //Resurrected
			PLAY K 5;
			PLAY JIH 5;
			Goto See;
	}
}