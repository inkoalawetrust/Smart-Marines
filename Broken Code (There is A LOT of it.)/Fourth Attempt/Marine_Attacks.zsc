//The attack-related marine behavior are here. Still very incomplete obviously.

//To do

Extend Class SmartMarine
{
	Protected Void Marine_AttackVariablesInit ()
	{
		//Default user variable values.
		If (User_GrenadeChance <= 0) {User_GrenadeChance = 240;} //Decide a number.
		console.printf("User_GrenadeChance is %d", User_GrenadeChance);
		//Internal variables
		MagazineRounds = 20;
	}
	//Uses the grenades' obituary if a player was blown up by it.
	Override String GetObituary (Actor Victim, Actor Inflictor, Name MOD, Bool PlayerAttack)
	{
		String Message;
		
		If (Inflictor) {Message = Inflictor.GetObituary (Victim, Inflictor, MOD, PlayerAttack);}
		If (!Message) {Message = Super.GetObituary (Victim, Inflictor, MOD, PlayerAttack);}
		
		Return Message;
	}
	//Internal variables
	Protected Int MagazineRounds; //The amount of rounds the marine has, if it reaches 0, he has to reload.
	States
	{
		DecideRangedAttack: //Decides if the marine will throw a grenade, and if he doesn't then he just shoots.
			TNT1 A 0
			{
				If (!User_NoGrenade) //Don't run any of this if User_NoGrenade is on.
				{
					Int GrenadeThrowChance;
					GrenadeThrowChance = Random (0,256); //Random chance of throwing the grenade, needs to be higher than User_GrenadeChance.
					If (Target && Target.Health >= 100) {GrenadeThrowChance += 4;} //Increase the chance if the target has 100 or more HP.
					console.printf("The initial throwing chance is %d", GrenadeThrowChance);
					
					//The below code checks how many enemies will be caught in the grenades' blast radius, and increases the likelyhood of throwing it
					//the more actors it finds.
					
					If (Target) //Null check, just in case.
					{
						BlockThingsIterator CheckAroundTarget = BlockThingsIterator.Create (Target,256); //Change the 256 to whatever the grenades blast radius will be.
						Actor FoundActor;
						While (CheckAroundTarget.Next()) //Look through the actors found around the potential blast radius.
						{
							FoundActor = CheckAroundTarget.Thing;
							
							//Checks if the pointer is valid, if the actor is a hostile monster, with health more than 20, and isn't the marine itself, or already the target.
							If (FoundActor && FoundActor.bIsMonster && IsHostile(FoundActor) && FoundActor.Health >= 20 && FoundActor != Self && FoundActor != Target)
							//Add to the chance of the marine throwing a grenade for every actor around the marines' target that meets the above conditions.
							{GrenadeThrowChance += Random(10,20);}
						}
					}
					console.printf("The throwing chance is now up to %d", GrenadeThrowChance);
					If (GrenadeThrowChance >= User_GrenadeChance && Random(0,256) >= 128)
					{Return ResolveState ("ThrowGrenade");} //then jump to the grenade throwing state.
				}
				Return ResolveState(Null);
			}
			#### # 0;
			Goto FireBurst;
		
		FireBurst: //Loops this state (Except for the first state frame.) 5 times before going back to the see state, or having to reload.
			MAR2 A 1 A_FaceTarget();
			MARR A 4 Light ("MarineMuzzleFlash")
			{
				A_FaceTarget (FRandom (5,10),FRandom (5,10)); //So when shooting he doesn't always aim exactly at the target.
				A_CustomBulletAttack (2.5,2.6,1,Random(6,12),"SmartMarinePuff",8196+2,CBAF_NORANDOM|CBAF_AIMFACING,spawnheight:42,-6);
				A_StartSound ("Marine/Fire",CHAN_WEAPON);
				//If (CheckProximity ("SmartMarineGrenade",192,1,CPXF_CHECKSIGHT)) {Return ResolveState ("RunAway");}
				//If (Target && IsVisible (Target,False) && Random (0,255) >= 200) {Return ResolveState ("See");}
				
				If (!User_NoReload) //Don't run this code if the marine was set to never reload.
				{
					MagazineRounds--; //Decrement the rounds in the magazine.
					a_logint (magazinerounds);
					If (MagazineRounds <= 0) //If there are no rounds in the magazine.
					{
						Return ResolveState("Retreat"); //Then run away to reload.
					}
				}
				
				If (Random (0,256) >= 252) {Return ResolveState ("See");}//May stop firing and move.
				Return ResolveState(Null);
			}
			MAR2 A 1;
			Goto FireBurst;
		
		Reload: //Self-explanatory
			TNT1 A 0 A_CheckProximity ("RunAway","SmartMarineGrenade",192,1,CPXF_CHECKSIGHT);
			MARL ABC 8;
			MARL D 8 A_SpawnItemEx ("SmartMarineEmptyMagazine",0,16,27,0,4,-1);
			MARL C 8;
			MARL B 8
			{
				A_StartSound ("Marine/Reload",CHAN_WEAPON);
				MagazineRounds = 20;
			}
			MARL C 6;
			Goto See;
		
		RifleHit: //Marine hits the target with his rifle.
			MARM A 8
			{
				If (User_NoMelee) {Return ResolveState ("RunAway");} //If this variable is on, run away when in melee range.
				Return ResolveState (Null); //Continue if it isn't.
			}
			MARM B 6 A_CustomMeleeAttack (Random(8,24),"Marine/Melee","Marine/MeleeMiss",'Melee',False); //Blunt force attack, so no blood.
			MARM A 4 A_Jump (80,"RunAway"); //A chance that the marine runs away, even if the target is still in range.
			Goto See;
		
		ThrowGrenade: //https://www.youtube.com/watch?v=BJrxKiW5f-4
			MARG AA 8 A_FaceTarget();
			MARG B 8
			{
				A_Log ("Throwing grenade");
				A_StartSound ("Marine/Throw");
				Bool Thrown; Actor Grenade;
				[Thrown, Grenade] = A_ThrowGrenade ("SmartMarineGrenade",38,FRandom(16,24),FRandom(4,8));
				Grenade.Target = Self; //Make yourself the grenades' target, so a player kill is attributed to you.
			}
			MARG B 4;
			Goto See;

	}
}

//$GZDB_SKIP

//=================================
//Additional actors the marine uses
//=================================

Class SmartMarineGrenade : Actor
{
	Default
	{
		Radius 4;
		Height 8;
		Mass 1;
		Gravity 0.5;
		Scale 0.5;
		BounceType "Hexen";
		BounceSound "Grenade/Bounce";
		Obituary "%o ate a marine's explosive pineapple !";
		Projectile;
		-NoGravity;
		-NoBlockmap;
		+RollSprite;
		+FloorClip;
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	Int FuseTimer; //The time the grenade has before exploding.
	Int RollDirection; //The random direction in which the grenade will roll.
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx ("SmartMarineGrenadeLever",yvel:FRandom(-2,-4),FRandom(2,4));
				FuseTimer = 25/2; //This gives the grenade approximately 3 seconds before exploding.
				RollDirection = Random (1,2);
			}
			MGRE B 8
			{
				If (RollDirection <= 1) {Roll += 20;}
				If (RollDirection >= 2 ) {Roll += -20;}
				//If the fuse timer is 0 and the grenade exploded above 32 MU, enter the air explosion state.
				If (FuseTimer <= 0 && (Pos.Z - FloorZ) >= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Air");}
				//If the fuse timer is 0 and the grenade exploded below 32 MU, enter the ground explosion state.
				If (FuseTimer <= 0 && (Pos.Z - FloorZ) <= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Floor");}
				FuseTimer--;
				Return ResolveState(Null);
			}
			Goto Spawn+1;
		Death.Floor:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				bMoveWithSector = True;
				A_StartSound ("Grenade/Explode",CHAN_WEAPON,attenuation:0.6);
				A_QuakeEx (1,1,1,35,0,512);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",256,0,DYNAMICLIGHT.LF_ATTENUATE,param:1.714285714285714*3.4);
				A_SetScale (3.0); //Directly modifying the scale doesn't work for some reason.
				Roll = 0;
			}
			GXPL A 2 Bright;
			GXPL B 4 Bright A_Explode (96,192,fulldamagedistance:32);
			GXPL CDEFGHIJKLMNO 4 Bright;
			Stop;
		Death.Air:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				A_StartSound ("Grenade/Explode",CHAN_WEAPON,attenuation:0.6);
				A_QuakeEx (1,1,1,35,0,512);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",256,0,DYNAMICLIGHT.LF_ATTENUATE,param:1.714285714285714*3.4);
				A_SetScale (3.0);
				Roll = 0;
			}
			GAXP A 4 Bright;
			GAXP B 4 Bright A_Explode (96,192,fulldamagedistance:32);
			GAXP CDEFGHIJ 4 Bright;
			Stop;
	}
}

Class SmartMarineGrenadeLever : Actor //The lever the grenade drops once the pin is pulled.
{
	Default
	{
		Scale 0.5;
		+NoBlockmap;
		+RollSprite;
	}
	States
	{
		Spawn:
			MGRE C 1 NoDelay
			{
				If (Pos.Z - FloorZ >= 1) {A_SetRoll (Roll+5,SPF_INTERPOLATE);}
				Else {Roll = 0;}
			}
			Loop;
	}
}






//The empty magazines the marine throws when reloading.

Class SmartMarineEmptyMagazine : Actor
{
	Default {Scale 0.75; +NoBlockmap; +RollSprite;}
	States
	{
		Spawn:
			MARL Z 16 NoDelay
			{
				If (Pos.Z - FloorZ >= 1) {Roll += 45;}
				Else {Roll = 45;} //Fall sideways on the floor.
			}
			Loop;
	}
}
