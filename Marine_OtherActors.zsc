//$GZDB_SKIP

//Actors that are in some way related to the marines' attacks.

Class SmartMarinePuff : BulletPuff
{
	Default
	{
		Species "SmartMarine";
		DamageType "MarineRifle";
		Decal "BulletChip";
		+MThruSpecies;
		+PuffGetsOwner;
	}
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		If (Target && !Target.bFriendly)
		{
			Self.Species = "HostileSmartMarine";
		}
	}
}

Class SmartMarineStandingMessage : Actor
{
	Default
	{
		Scale 0.25;
		+NoInteraction;
		+NoGravity;
		+Bright;
	}
	States
	{
		Spawn:
			MARC A 16;
			MARC A 1 A_FadeOut (0.05);
			Wait;
	}
}

Class SmartMarineWanderingMessage : SmartMarineStandingMessage
{
	States
	{
		Spawn:
			MARC B 16;
			MARC B 1 A_FadeOut (0.05);
			Wait;
	}
}

//Try rewriting and simplifying the grenade code. And make liquid explosion states based on what fluid the grenade exploded on.

Class SM_Grenade : Actor
{
	Default
	{
		Radius 4;
		Height 8;
		Mass 1;
		Gravity 0.5;
		Scale 0.5;
		Speed 24;
		BounceFactor 0.4;
		WallBounceFactor 0.5;
		ReactionTime 12; //Used as the fuse timer, similar to how A_Countdown uses it. This makes the grenade take about 3 seconds to explode.
		BounceType "Hexen";
		BounceSound "Grenade/Bounce";
		Obituary "%o ate a marine's explosive pineapple !";
		DamageType "MarineGrenade";
		Projectile;
		-NoGravity;
		-NoBlockmap; //So marines can find and run from them.
		+Friendly; //Through arcane machinations unknown to man. This fixes a bug that makes friendly marines that were spawned in, run in place when finding a grenade near them.
		+RollSprite;
		+FloorClip;
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx ("SM_GrenadeLever",yvel:FRandom(-2,-4),FRandom(2,4));
			MGRE B 8
			{
				Roll += 20;
				//If the fuse timer is 0 and the grenade exploded above 32 MU, enter the air explosion state.
				If (ReactionTime <= 0 && (Pos.Z - FloorZ) >= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Air");}
				//If the fuse timer is 0 and the grenade exploded below 32 MU, enter the ground explosion state.
				If (ReactionTime <= 0 && (Pos.Z - FloorZ) <= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Floor");}
				ReactionTime--;
				Return ResolveState(Null);
			}
			Goto Spawn+1;
		Death.Floor:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				bMoveWithSector = True;
				A_StartSound ("Grenade/Explode",CHAN_WEAPON,attenuation:0.6);
				A_QuakeEx (1,1,1,35,0,512);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",512,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,1),param:1.714285714285714*3.4);
				A_SetScale (3.0); //Directly modifying the scale doesn't work for some reason.
				Roll = 0;
			}
			GXPL A 2 Bright;
			GXPL B 4 Bright A_Explode (128,192);
			GXPL CDEFGHIJKLMNO 4 Bright;
			Stop;
		Death.Air:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				A_StartSound ("Grenade/Explode",CHAN_WEAPON,attenuation:0.6);
				A_QuakeEx (1,1,1,35,0,512);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",512,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,1),param:1.714285714285714*3.4);
				A_SetScale (3.0);
				Roll = 0;
			}
			GAXP A 4 Bright;
			GAXP B 4 Bright A_Explode (128,192);
			GAXP CDEFGHIJ 4 Bright;
			Stop;
	}
}

Class SM_GrenadeLever : Actor //The lever the grenade drops once the pin is pulled.
{
	Default
	{
		Scale 0.5;
		+NoBlockmap;
		+RollSprite;
	}
	States
	{
		Spawn:
			MGRE C 1 NoDelay
			{
				If (Pos.Z - FloorZ >= 1) {A_SetRoll (Roll+5,SPF_INTERPOLATE);}
				Else {Roll = 0;}
			}
			Loop;
	}
}

Class SmartMarineEmptyMagazine : Actor
{
	Default {Scale 0.75; +NoBlockmap; +RollSprite;}
	States
	{
		Spawn:
			MARL Z 16 NoDelay
			{
				If (Pos.Z - FloorZ >= 1) {Roll += 45;}
				Else {SpriteOffset.X = 4; Roll = 90;} //Fall sideways on the floor.
			}
			Loop;
	}
}
/*
class smarterimp : doomimp replaces doomimp
{
	Actor OriginalTarget;
	//Searches for grenades that are about to explode near the marine.
	Bool SM_FindNearbyGrenade (Double SearchRadius = 256)
	{
		Actor Mobj;
		BlockThingsIterator GrenadeSearch = BlockThingsIterator.Create (Self,SearchRadius);
		
		While (GrenadeSearch.Next())
		{
			Mobj = GrenadeSearch.Thing;
			//a_log ("looking for grenades");
			If (Mobj.GetClassName() == "SM_Grenade" && Mobj.ReactionTime <= 6 && Distance3D (Mobj) <= SearchRadius && IsVisible (Mobj,True)) //If the found actor is a grenade, that will explode in about a second. And you are in the blast radius and it's visible.
			{
				OriginalTarget = Target; //Keep the original target of the marine stored.
				Target = Mobj; //Then change the target to the grenade that was found.
				//a_log ("found a grenade");
				Return True; //And return true.
			}
		}
		//a_log ("no grenades found");
		Return False; //No grenades were found near the marine.
	}
	States
	{
		Spawn:
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			TROO A 10 A_Look();
			TNT1 A 0 A_JumpIf (SM_FindNearbyGrenade(),"RunAway");
			TROO B 10 A_Look();
			Loop;
		See:
			TROO AABBCCDD 3
			{
				A_Chase();
				
				If (SM_FindNearbyGrenade())
				{
					Return ResolveState ("RunAway");
				}
				
				Return State (Null);
			}
			Loop;
		RunAway: //Makes the marine run away from any grenades about to explode, this state must NEVER be broken.
			TNT1 A 0 //Stop the state from being interrupted, and make the marine quickly run away from the grenade.
			{
				bNoPain = True;
				bFrightened = True;
				Speed = Default.Speed*1.75;
			}
			TROO AABBCCDD 2 A_Chase (Null,Null);
			TNT1 A 0
			{
				If (OriginalTarget && OriginalTarget.Health > 0)
				{Target = OriginalTarget;} //If the marine had a target prior to running from a grenade, and it's still alive, then set it back.
				Else {Target = Null;} //Otherwise just remove the grenade from the target field.
				bNoPain = False;
				bFrightened = False;
				Speed = Default.Speed;
			}
			Goto See; //Go back to the see state.
	}
}