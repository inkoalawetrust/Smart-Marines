//Miscellaneous actors related to the marine.

//Marines that are in range of this actor when it's active will be stopped from crouching.
//This actor uses custom arguments unlike the marines, because I don't have to worry about someone giving this actor a death special. Nor does it have that many parameters.
Class SM_NoCrouchZone : Actor
{
	Default
	{
		//$Title No Crouch Zone (AI Marines)
		//$Category ZDoom
		//$Sprite MARCZ0
		//$Arg0 Range
		//$Arg0Tooltip The range in which the crouch zone will prevent marines from crouching.
		//$Arg0Default 128
		//$Arg1 Crouch Delay
		//$Arg1Tooltip How long this zone should prevent marines from crouching after they leave it.
		//$Arg1Default 35
		//$NotAngled
		Radius 16;
		Height 32;
		+NoBlockmap;
	}
	
	Override Void Activate(Actor Activator)
	{
		Super.Activate (Activator);
		SetStateLabel ("Spawn");
	}
	
	Override Void Deactivate(Actor Activator)
	{
		Super.Deactivate (Activator);
		SetStateLabel ("Idle");
	}
	
	States
	{
		Spawn:
			TNT1 A 2 NoDelay; //If the actor is turned off right after being spawned, this initial delay prevents it from telling any marines around it to not crouch.
			TNT1 A 1
			{
				BlockThingsIterator MarineFinder = BlockThingsIterator.Create(Self,args[0]);
				Actor Mobj;
				
				While (MarineFinder.Next())
				{
					Mobj = MarineFinder.Thing;
					If (Mobj.GetClassName() == "SmartMarine" && Mobj.Health > 0 && !Mobj.bDormant && Distance2DSquared(Mobj) <= args[0]*args[0])
						SmartMarine(Mobj).CrouchDelay = Clamp(args[1],2,INT.MAX); //The minimum acceptable value is a 2 tics before the marine can crouch again.
				}
			}
			Wait;
		Idle:
			TNT1 A 1;
			Loop;
	}
}

//$GZDB_SKIP

Class SmartMarinePuff : BulletPuff
{
	Default
	{
		Species "SmartMarine";
		DamageType "MarineRifle";
		Decal "BulletChip";
		+MThruSpecies;
		+PuffGetsOwner;
	}
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		
		If (Target && !Target.bFriendly)
			Species = "HostileSmartMarine";
	}
}

Class SmartMarineStandingMessage : Actor
{
	Default
	{
		Scale 0.25;
		+NoInteraction;
		+NoGravity;
		+Bright;
	}
	States
	{
		Spawn:
			MARC A 16;
			MARC A 1 A_FadeOut (0.05);
			Wait;
	}
}

Class SmartMarineWanderingMessage : SmartMarineStandingMessage
{
	States
	{
		Spawn:
			MARC B 16;
			MARC B 1 A_FadeOut (0.05);
			Wait;
	}
}

Class SmartMarineTurretMessage : SmartMarineStandingMessage
{
	States
	{
		Spawn:
			MARC C 16;
			MARC C 1 A_FadeOut (0.05);
			Wait;
	}
}

Class SmartMarineFollowingMessage : SmartMarineStandingMessage
{
	States
	{
		Spawn:
			MARC D 16;
			MARC D 1 A_FadeOut (0.05);
			Wait;
	}
}

Class SM_Grenade : Actor
{
	Default
	{
		Radius 4;
		Height 8;
		Mass 1;
		Gravity 0.5;
		Scale 0.5;
		Speed 30;
		BounceFactor 0.4;
		WallBounceFactor 0.5;
		ReactionTime 35*3; //Used as the fuse timer, similar to how A_Countdown uses it.
		BounceType "Hexen";
		BounceSound "Grenade/Bounce";
		DamageType "MarineGrenade";
		Projectile;
		-NoGravity;
		-NoBlockmap; //So marines can find and run from them.
		+Friendly; //Through arcane machinations unknown to man. This fixes a bug that makes friendly marines that were spawned in, run in place when finding a grenade near them.
		+RollSprite;
		+FloorClip;
		+CanBounceWater;
		+DontBounceOnSky;
		+BounceOnActors;
	}
	Mixin GrenadeFunctions;
	
	Enum SM_LiquidType
	{
		SM_HitNoLiquid = 0,
		SM_HitWater = 1,
		SM_HitNukage = 3,
		SM_HitBlood = 4,
		SM_HitLava = 5,
		SM_HitSlime = 6,
	};
	
	Int SM_GrenadeHasHit;
	Bool Exploded;
	
	Override Void Tick()
	{
		Super.Tick();
		
		If (IsFrozen())
			Return;
		
		//The actual timer.
		If (InStateSequence(CurState,ResolveState("Spawn")))
			ReactionTime--;
		
		//Play the beeping sound when the grenades' fuse is halfway to detonaton. But not when the grenade has exploded.
		If (ReactionTime > 0 && ReactionTime <= Default.ReactionTime/2)
			A_StartSound ("Grenade/Warning",CHAN_WEAPON,CHANF_LOOPING,1.0,2);
		
		//"Water physics"
		If (WaterLevel >= 1 && Gravity != 0)
		{
			BounceFactor = 1.0; //Don't bounce underwater.
			A_ScaleVelocity (0.98);
			A_ChangeVelocity (z:0.25,CVF_RELATIVE);
		}
		Else
			BounceFactor = Default.BounceFactor; //Can bounce again while not submerged.
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx ("SM_GrenadeLever",yvel:FRandom(-2,-4),FRandom(2,4));
			MGRE B 4
			{
				//Only roll and play the bounce sound when moving fast enough.
				If (Vel.Length() >= 2)
				{
					BounceSound = Default.BounceSound;
					Roll += 20;
				}
				Else
					BounceSound = "";
				
				//First, check if the grenade exploded near the floor of a sector or 3D floor with a liquid flat.
				If (ReactionTime <= 0 && (SM_GrenadeExplodedOnLiquid() != SM_HitNoLiquid))
				{
					SM_GrenadeHasHit = SM_GrenadeExplodedOnLiquid();
					Return ResolveState ("Death.Floor.Liquid");
				}
				
				//If the fuse timer is 0 and the grenade exploded above 32 MU, enter the air explosion state.
				If (ReactionTime <= 0 && (Pos.Z - FloorZ) >= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Air");}
				//If the fuse timer is 0 and the grenade exploded below 32 MU, enter the ground explosion state.
				If (ReactionTime <= 0 && (Pos.Z - FloorZ) <= 32) {A_SetRenderStyle (1.0,Style_Add);Return ResolveState ("Death.Floor");}
				Return ResolveState(Null);
			}
			Goto Spawn+1;
		Death.Floor:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				bMoveWithSector = True;
				A_QuakeEx (1,1,1,35,0,512);
				A_SetScale (3.0); //Directly modifying the scale doesn't work for some reason.
				A_StartSound ("Grenade/Explode",CHAN_WEAPON,attenuation:0.6);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",512,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,1),param:1.714285714285714*3.4);
				Roll = 0;
			}
			GXPL A 2 Bright;
			GXPL B 4 Bright A_Explode (128,192,fulldamagedistance:24);
			GXPL CDEF 4 Bright;
			TNT1 A 0 {Exploded = True;}
			GXPL GHIJKLMNO 4 Bright;
			Stop;
		Death.Floor.Liquid:
			TNT1 A 0
			{
				//Change the liquid explosion sprites to use, based on what type of liquid the grenade impacted.
				If (SM_GrenadeHasHit == SM_HitNoLiquid || SM_GrenadeHasHit == SM_HitWater)
					Sprite = GetSpriteIndex ("GSPL");
				Else If (SM_GrenadeHasHit == SM_HitNukage)
					Sprite = GetSpriteIndex ("GSPN");
				Else If (SM_GrenadeHasHit == SM_HitLava)
					Sprite = GetSpriteIndex ("GSPP");
				Else If (SM_GrenadeHasHit == SM_HitBlood)
					Sprite = GetSpriteIndex ("GSPB");
				Else If (SM_GrenadeHasHit == SM_HitSlime)
					Sprite = GetSpriteIndex ("GSPS");
				
				A_Stop();
				Gravity = 0;
				bMoveWithSector = True;
				A_QuakeEx (1,1,1,35,0,512);
				A_SetScale (3.0); //Directly modifying the scale doesn't work for some reason.
				Roll = 0;
			}
			#### A 3 A_StartSound ("Grenade/WaterBlast",CHAN_WEAPON,attenuation:0.6);
			#### B 3 A_Explode (128,128,fulldamagedistance:16); //Explosions inside of liquids do less damage.
			#### CDEF 4;
			#### # 0 {Exploded = True;}
			#### GHIJKLMNOPQRSTUVWXYZ 3;
			Stop;
		Death.Air:
			TNT1 A 0
			{
				A_Stop();
				Gravity = 0;
				A_StartSound ("Grenade/Explode",CHAN_WEAPON,attenuation:0.6);
				A_QuakeEx (1,1,1,35,0,512);
				A_AttachLight ("GrenadeLight",DynamicLight.PulseLight,"FFE2B3",512,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,1),param:1.714285714285714*3.4);
				A_SetScale (3.0);
				Roll = 0;
			}
			GAXP A 5 Bright;
			GAXP B 5 Bright A_Explode (128,224,fulldamagedistance:56);
			GAXP CDEF 5 Bright;
			TNT1 A 0 {Exploded = True;}
			GAXP GHIJ 5 Bright;
			Stop;
		DummySprites: //So GetSpriteIndex doesn't shit itself.
			TNT1 A 0 A_Log ("An SM_Grenade actor entered the dummy sprites state, that shouldn't happen !");
			GSPL ABCDEFGHIJKLMNOPQRSTUVWXYZ 0; //Water
			GSPB ABCDEFGHIJKLMNOPQRSTUVWXYZ 0; //Blood
			GSPP ABCDEFGHIJKLMNOPQRSTUVWXYZ 0; //Lava
			GSPN ABCDEFGHIJKLMNOPQRSTUVWXYZ 0; //Nukage
			GSPS ABCDEFGHIJKLMNOPQRSTUVWXYZ 0; //Slime
			Stop;
	}
}

Class SM_GrenadeLever : Actor //The lever the grenade drops once the pin is pulled.
{
	Default
	{
		Radius 6;
		Height 8;
		Scale 0.5;
		+NoBlockmap;
		+RollSprite;
		+MoveWithSector;
	}
	States
	{
		Spawn:
			MGRE C 1 NoDelay
			{
				If (Pos.Z - FloorZ >= 1)
					Roll += 5;
				Else
					Roll = 0;
			}
			Loop;
	}
}

Class SmartMarineEmptyMagazine : Actor
{
	Default
	{
		Radius 6;
		Height 8;
		Scale 0.7;
		+NoBlockmap;
		+RollSprite;
		+MoveWithSector;
	}
	States
	{
		Spawn:
			MARL Z 1 NoDelay
			{
				If (Pos.Z - FloorZ >= 1)
					Roll += 5;
				Else {SpriteOffset.X = 3; Roll = 90;} //Fall sideways on the floor.
			}
			Loop;
	}
}

//https://www.youtube.com/watch?v=nQ3DBS_SQDA
Class SmartMarineErased : Actor
{
	Default {+NoInteraction;}
	States
	{
		Spawn:
			PLAY G 4 NoDelay A_StartSound ("Marine/Gone",CHAN_VOICE);
			TNT1 A 35;
			Stop;
	}
}

Class SM_BulletSplash : Actor
{
	Default
	{
		Scale 0.5;
		+NoInteraction;
		+MoveWithSector;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_StartSound("VRifle/WaterHit",CHAN_VOICE,attenuation:ATTN_STATIC);
			HSPL ABCDEFGHI 1;
			Stop;
	}
}

Class SM_TurretLocationMarker : PatrolPoint
{
	Override Void Tick()
	{
		Super.Tick();
		If (!Master) Destroy();
		If (IsFrozen()) Return;
		
		Warp (Master); //If the turret moves horizontally somehow, then move too, to update the location the marine has to go to.
	}
}